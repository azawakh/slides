(window.webpackJsonp=window.webpackJsonp||[]).push([[4],[,,,function(e,t,n){e.exports=n.p+"4136fffc8406df25f2c8b98ab265e4b8.webp"},,function(e,t,n){e.exports=n.p+"b7dd0bfcfd073fa39079b4272954fdc0.webp"},,,,,,,function(e,t,n){e.exports=n.p+"4d171775847180d4d1cfeca6028026c7.webp"},function(e,t,n){e.exports=n.p+"de802ae92aae61304904ae8c23ca8d9f.webp"},,,,function(e,t,n){n(18),n(52),e.exports=n(49)},,,,,,,,,,,,,,,,,function(e,t,n){var a={"./0-title.md":35,"./01-self-introduction.md":36,"./02-Make-Tests-Easy-to-Read-and-Maintain.md":37,"./03-What's-Wrong-with-This-Test.md":38,"./04-Making-This-Test-More-Readable.md":39,"./05-Making-Error-Messages-Readable.md":40,"./06-Choosing-Good-Test-Inputs.md":41,"./07-Naming-Test-Functions.md":42,"./08-What-Was-Wrong-with-That-Test.md":43,"./09-Test-Friendly-Development.md":44,"./10-Going-Too-Far.md":45,"./11-Summary.md":46,"./12-hiring.md":47,"./13-end.md":48};function r(e){var t=l(e);return n(t)}function l(e){if(!n.o(a,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return a[e]}r.keys=function(){return Object.keys(a)},r.resolve=l,e.exports=r,r.id=34},function(e,t,n){"use strict";n.r(t),n.d(t,"slides",(function(){return s})),n.d(t,"fusumaProps",(function(){return u})),n.d(t,"default",(function(){return p}));var a=n(2),r=n.n(a),l=n(0);function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=[function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h1",null,"Testing and Readability"))}],u=[{classes:"title",note:"英語で書いてみたお（ ＾ω＾）\nスライドって公開してもいいのかお？"}],i={slides:s},b="wrapper";function p(e){var t=e.components,n=c(e,["components"]);return Object(l.a)(b,o({},i,n,{components:t,mdxType:"MDXLayout"}),Object(l.a)("h1",null,"Testing and Readability"))}p.isMDXComponent=!0},function(e,t,n){"use strict";n.r(t),n.d(t,"slides",(function(){return s})),n.d(t,"fusumaProps",(function(){return u})),n.d(t,"default",(function(){return p}));var a=n(2),r=n.n(a),l=n(0);function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=[function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("section",null,Object(l.a)("h2",null,"💪"," ME ","💪"),Object(l.a)("br",null),Object(l.a)("div",{className:"profile"},Object(l.a)("img",{src:"https://s.gravatar.com/avatar/ec49b9f7128ec5e8806823e856fac6ba?size=200&default=retro",alt:"profile",className:"profile-avatar"}),Object(l.a)("h4",{className:"profile-name"},"Ota Naoto"),Object(l.a)("div",{className:"sns-list"},Object(l.a)("div",{className:"sns-list"},Object(l.a)("a",{href:"https://twitter.com/hagevvashi_d",target:"_blank"},Object(l.a)("i",{className:"fab fa-twitter"})),Object(l.a)("a",{href:"https://github.com/hagevvashi",target:"_blank"},Object(l.a)("i",{className:"fab fa-github"})))),Object(l.a)("div",{className:"profile-info"},Object(l.a)("p",null,"A frontend engineer"),Object(l.a)("p",null,"Kakaku.com, Inc"),Object(l.a)("p",null,Object(l.a)("img",{src:"https://tblg.k-img.com/images/restaurant/logo/logo_tabelog_white.svg?1547477433",alt:"Tabelog"}))))))}],u=[{classes:"profile"}],i={slides:s},b="wrapper";function p(e){var t=e.components,n=c(e,["components"]);return Object(l.a)(b,o({},i,n,{components:t,mdxType:"MDXLayout"}),Object(l.a)("section",null,Object(l.a)("h2",null,"💪"," ME ","💪"),Object(l.a)("br",null),Object(l.a)("div",{className:"profile"},Object(l.a)("img",{src:"https://s.gravatar.com/avatar/ec49b9f7128ec5e8806823e856fac6ba?size=200&default=retro",alt:"profile",className:"profile-avatar"}),Object(l.a)("h4",{className:"profile-name"},"Ota Naoto"),Object(l.a)("div",{className:"sns-list"},Object(l.a)("div",{className:"sns-list"},Object(l.a)("a",{href:"https://twitter.com/hagevvashi_d",target:"_blank"},Object(l.a)("i",{className:"fab fa-twitter"})),Object(l.a)("a",{href:"https://github.com/hagevvashi",target:"_blank"},Object(l.a)("i",{className:"fab fa-github"})))),Object(l.a)("div",{className:"profile-info"},Object(l.a)("p",null,"A frontend engineer"),Object(l.a)("p",null,"Kakaku.com, Inc"),Object(l.a)("p",null,Object(l.a)("img",{src:"https://tblg.k-img.com/images/restaurant/logo/logo_tabelog_white.svg?1547477433",alt:"Tabelog"}))))))}p.isMDXComponent=!0},function(e,t,n){"use strict";n.r(t),n.d(t,"slides",(function(){return s})),n.d(t,"fusumaProps",(function(){return u})),n.d(t,"default",(function(){return p}));var a=n(2),r=n.n(a),l=n(0);function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=[function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"Make Tests Easy to Read and Maintain"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"KEY IDEA"),Object(l.a)("blockquote",null,Object(l.a)("p",{parentName:"blockquote"},"Test code should be readable so that other coders are comfortable changing or adding tests.")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("blockquote",null,Object(l.a)("p",{parentName:"blockquote"},"Other coders will often look at the test code as unofficial documentation of how the real code works and should be used."),Object(l.a)("br",null),"テストコードというのは「本物のコードの動作と使い方を示した非公式的な文書」だと考えるプログラマもいるほどである"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"When test code is big and scary, here's what happens:"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"Coders are afraid to modify the real code.")),Object(l.a)("p",null,"Oh, we don't want to mess with that code-updating all the tests would be a nightmare!"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"Coders don't add new tests when they add new code.")),Object(l.a)("p",null,"Over time, less and less of your module is tested, and you are no longer confident that it all works."))}],u=[{classes:"title"},{},{},{},{note:"訳がおかしい気がする\nプロダクトコードをいじりたくないってことでは？\nすべてのテストコードが悪夢のようになってしまうから"},{note:"テストのあるモジュールが減っていって、動いていることに自信が持てなくなる"}],i={slides:s},b="wrapper";function p(e){var t=e.components,n=c(e,["components"]);return Object(l.a)(b,o({},i,n,{components:t,mdxType:"MDXLayout"}),Object(l.a)("h2",null,"Make Tests Easy to Read and Maintain"),Object(l.a)("hr",null),Object(l.a)("h2",null,"KEY IDEA"),Object(l.a)("blockquote",null,Object(l.a)("p",{parentName:"blockquote"},"Test code should be readable so that other coders are comfortable changing or adding tests.")),Object(l.a)("hr",null),Object(l.a)("blockquote",null,Object(l.a)("p",{parentName:"blockquote"},"Other coders will often look at the test code as unofficial documentation of how the real code works and should be used."),Object(l.a)("br",null),"テストコードというのは「本物のコードの動作と使い方を示した非公式的な文書」だと考えるプログラマもいるほどである"),Object(l.a)("hr",null),Object(l.a)("h3",null,"When test code is big and scary, here's what happens:"),Object(l.a)("hr",null),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"Coders are afraid to modify the real code.")),Object(l.a)("p",null,"Oh, we don't want to mess with that code-updating all the tests would be a nightmare!"),Object(l.a)("hr",null),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"Coders don't add new tests when they add new code.")),Object(l.a)("p",null,"Over time, less and less of your module is tested, and you are no longer confident that it all works."))}p.isMDXComponent=!0},function(e,t,n){"use strict";n.r(t),n.d(t,"slides",(function(){return s})),n.d(t,"fusumaProps",(function(){return u})),n.d(t,"default",(function(){return p}));var a=n(2),r=n.n(a),l=n(0);function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var s=[function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"What's Wrong wiht This Test"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"function declaration:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"// Sort 'docs' by score (highest first) and remove negative-scored documents.\nvoid SortAndFilterDocs(vector<ScoredDocument>* docs);\n")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"The test for this function originally looked something like:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'\nvoid Test1() {\n    vector<ScoredDocument> docs;\n    docs.resize(5);\n    docs[0].url = "http://example.com";\n    docs[0].score = -5.0;\n    docs[1].url = "http://example.com";\n    docs[1].score = 1;\n    docs[2].url = "http://example.com";\n    docs[2].score = 4;\n    docs[3].url = "http://example.com";\n    docs[3].score = -99998.7;\n    docs[4].url = "http://example.com";\n    docs[4].score = 3.0;\n\n    SortAndFilterDocs(&docs);\n\n    assert(docs.size() == 3);\n    assert(docs[0].score == 4);\n    assert(docs[1].score == 3.0);\n    assert(docs[2].score == 1);\n}\n\n')))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"😇"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"There are at least eight different problems with this test code"))}],u=[{classes:"title"},{},{},{note:"こいつはひどい・・・"},{}],i={slides:s},b="wrapper";function p(e){var t=e.components,n=o(e,["components"]);return Object(l.a)(b,c({},i,n,{components:t,mdxType:"MDXLayout"}),Object(l.a)("h2",null,"What's Wrong wiht This Test"),Object(l.a)("hr",null),Object(l.a)("h3",null,"function declaration:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"// Sort 'docs' by score (highest first) and remove negative-scored documents.\nvoid SortAndFilterDocs(vector<ScoredDocument>* docs);\n")),Object(l.a)("hr",null),Object(l.a)("h3",null,"The test for this function originally looked something like:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'\nvoid Test1() {\n    vector<ScoredDocument> docs;\n    docs.resize(5);\n    docs[0].url = "http://example.com";\n    docs[0].score = -5.0;\n    docs[1].url = "http://example.com";\n    docs[1].score = 1;\n    docs[2].url = "http://example.com";\n    docs[2].score = 4;\n    docs[3].url = "http://example.com";\n    docs[3].score = -99998.7;\n    docs[4].url = "http://example.com";\n    docs[4].score = 3.0;\n\n    SortAndFilterDocs(&docs);\n\n    assert(docs.size() == 3);\n    assert(docs[0].score == 4);\n    assert(docs[1].score == 3.0);\n    assert(docs[2].score == 1);\n}\n\n')),Object(l.a)("hr",null),Object(l.a)("h2",null,"😇"),Object(l.a)("hr",null),Object(l.a)("h3",null,"There are at least eight different problems with this test code"))}p.isMDXComponent=!0},function(e,t,n){"use strict";n.r(t),n.d(t,"slides",(function(){return s})),n.d(t,"fusumaProps",(function(){return u})),n.d(t,"default",(function(){return p}));var a=n(2),r=n.n(a),l=n(0);function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var s=[function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"Making This Test More Readable"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"hide less important details from the user, so that more important details are most prominent"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"The examples below are not about what this test is doing at a high level"),Object(l.a)("br",null),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"setting up a ",Object(l.a)("inlineCode",{parentName:"li"},"vector<ScoredDocument>")),Object(l.a)("li",{parentName:"ul"},"url, score, and docs[], which are just details about how the underlying C++ objects are set up")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"As a first step in cleaning this up, we could create a helper function like:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"void MakeScoredDoc(ScoredDocument* sd, double score, string url) {\n    sd->score = score;\n    sd->url = url;\n}\n")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"Using this function, our test code becomes slightly more compact:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'void Test1() {\n    vector<ScoredDocument> docs;\n    docs.resize(5);\n    MakeScoredDoc(&docs[0], -5.0, "http://example.com");\n    MakeScoredDoc(&docs[1], 1, "http://example.com");\n    MakeScoredDoc(&docs[2], 4, "http://example.com");\n    MakeScoredDoc(&docs[3], -99998.7, "http://example.com");\n    ...\n}\n')))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"But this isn't good enough"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"there are still unimportant details in our face"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("div",{className:"aligncenter",style:{width:"50%"}},Object(l.a)("h4",null,"for instance"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},'the parameter "',Object(l.a)("a",c({parentName:"li"},{href:"http://example.com"}),"http://example.com"),'" is just an eyesore.',Object(l.a)("blockquote",{parentName:"li"},Object(l.a)("p",{parentName:"blockquote"},"It's always the same, and the exact URL doesn't even matter - it's just needed to fill out a valid ScoredDocument."))),Object(l.a)("li",{parentName:"ul"},"docs.resize(5) and &docs","[0]",", &docs","[1]",", and so on"))))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"Let's change our helper function to do more work for us and call it AddScoredDoc():"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'void AddScoredDoc(vector<ScoredDocument>& docs, double score) {\n    ScoredDocument sd;\n    sd.score = score;\n    sd.url = "http://example.com";\n    docs.push_back(sd);\n}\n')))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"Using this function, our test code is even more compact:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"void Test1() {\n    vector<ScoredDocument> docs;\n    AddScoredDoc(docs, -5.0);\n    AddScoredDoc(docs, 1);\n    AddScoredDoc(docs, 4);\n    AddScoredDoc(docs, -99998.7);\n    ...\n}\n")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,'still doesn\'t pass the "highly readable and writable" test'))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"If you wanted to add another test with a new set of scored docs, it would require a lot of copying and pasting."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"So how do we go about improving it further?"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"Creating the Minimal Test Statement"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"To improve this test code, let's use the technique from Chapter 12, Turning Thoughts into Code."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"Let's describe what our test is trying to do in plain English:"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("blockquote",null,Object(l.a)("p",{parentName:"blockquote"},"We have a list of documents whose scores are ","[-5, 1, 4, -99998.7, 3]","."),Object(l.a)("br",null),"AfterSortAndFilterDocs(), the remaining documents should have scores of [4, 3, 1], in that order."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"As you can see, nowhere in that description did we mention a ",Object(l.a)("inlineCode",{parentName:"p"},"vector<ScoredDocument>"),"."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"The array of scores is what's most important here."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"Ideally, our test code would look something like:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'CheckScoresBeforeAfter("-5, 1, 4, -99998.7, 3",  "4, 3, 1");\n')))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h4",null,"We were able to boil the essence of this test down to one line of code!😂"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"The essence of most tests boils down to ",Object(l.a)("em",{parentName:"li"},"for this input/situation, expect this behavior/output"),"."),Object(l.a)("li",{parentName:"ul"},"In many cases, this goal can be expressed in just one line."),Object(l.a)("li",{parentName:"ul"},"Makes it very easy to add more test cases.")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,'Implementing Custom "Minilanguages"'))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("blockquote",null,Object(l.a)("p",{parentName:"blockquote"},"Notice that CheckScoresBeforeAfter() takes two string arguments that describe the array of scores.")),Object(l.a)("blockquote",null,Object(l.a)("p",{parentName:"blockquote"},"In later versions of C++, you can pass in array literals like this:")),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"CheckScoresBeforeAfter({-5, 1, 4, -99998.7, 3}, {4, 3, 1});\n")),Object(l.a)("blockquote",null,Object(l.a)("p",{parentName:"blockquote"},"Because we couldn't do this at the time, we put the scores inside a string, separated by commas.For this approach to work, CheckScoresBeforeAfter() is going to have to parse those string arguments.")),Object(l.a)("blockquote",null,Object(l.a)("p",{parentName:"blockquote"},"In general, defining a custom minilanguage can be a powerful way to express a lot of information in a small amount of space.Other examples include printf() and regular expression libraries.")),Object(l.a)("blockquote",null,Object(l.a)("p",{parentName:"blockquote"},"In this case, writing some helper functions to parse a comma-separated list of numbers shouldn't be too hard.")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"In general, I thought that mini-language refers to DSL. . .🤔"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h4",null,"Here's what CheckScoresBeforeAfter() would look like:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"void CheckScoresBeforeAfter(string input, string expected_output) {\n    vector<ScoredDocument> docs = ScoredDocsFromString(input);\n    SortAndFilterDocs(&docs);\n    string output = ScoredDocsToString(docs);\n    assert(output == expected_output);\n}\n")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h4",null,"And for completeness, here are the helper functions that convert between string and ",Object(l.a)("inlineCode",{parentName:"h4"},"vector<ScoredDocument>"),":"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"vector<ScoredDocument> ScoredDocsFromString(string scores) {\n    vector<ScoredDocument> docs;\n\n    replace(scores.begin(), scores.end(), ',', ' ');\n\n    // Populate 'docs' from a string of space-separated scores.\n    istringstream stream(scores);\n    double score;\n    while (stream >> score) {\n        AddScoredDoc(docs, score);\n    }\n\n    return docs;\n}\n\nstring ScoredDocsToString(vector<ScoredDocument> docs) {\n    ostringstream stream;\n    for (int i = 0; i < docs.size(); i++) {\n        if (i > 0) stream << \", \";\n        stream << docs[i].score;\n    }\n\n    return stream.str();\n}\n")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"This may seem like a lot of code at first glance, but what it lets you do is incredibly powerful."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Because you can write an entire test with just one call to CheckScoresBeforeAfter(), you'll be inclined to add more tests (as we'll be doing later in the chapter)."))}],u=[{classes:"title"},{note:"一般的な設計原則\n「大切でない詳細はユーザから隠し、大切な詳細は目立つようにする」"},{},{},{},{},{},{},{note:"ヘルパーにもっと仕事させて\n名前も変えちまおう"},{note:"いくばくかマシにはなったかな"},{note:"とはいえ、まだまだ楽に読み書きできるテストとは言い難い"},{note:"別の新たなテストデータでテスト作ろうと思ったら、全部コピペするの？"},{},{},{note:"12章 「コードに思いを込める」を参照"},{},{},{note:"見て分かる通り、vectorについては何も言ってない"},{note:"スコアの配列が一番重要だろ\n\n次、理想"},{note:"理想的にはこれだわな"},{note:"一行にできたぜ！やった！\n珍しいことじゃないけどな\nThis is not uncommon, though. The essence of most tests boils down to\n\nこういう状況とインプットでこういう振る舞いするってレベルまで落とし込める\nしかも一行でいける\nテストケースの追加が簡単になる"},{},{note:"今は配列リテラルを渡せる\n当時は書くことができなかっただとかなんとかうだうだ言ってる\n独自のミニ言語を実装すると小さいスペースでたくさんのことが表現できるようになりますね\nたとえばprintf()関数とか正規表現のライブラリとか\nもし、estdio.h の include なしで実装するとしたら悪夢のようだ\nカンマで区切られたリストをパースするのはそんなむずくないぜ"},{classes:"reference",note:"閑話休題\nミニ言語っていうとDSLじゃね？\nここではヘルパーのこと指してるけど・・・"},{},{},{note:"一見するとコード量が多いでしょうよ\nしかしこいつができるようにしてくれたことは信じられないほどパワフルだと"},{note:"なぜかって言うと、CheckScoresBeforeAfter呼ぶだけで全部テストできちゃうんだぜ\nもっとたくさんテスト書きたくなるでしょ？"}],i={slides:s},b="wrapper";function p(e){var t=e.components,n=o(e,["components"]);return Object(l.a)(b,c({},i,n,{components:t,mdxType:"MDXLayout"}),Object(l.a)("h2",null,"Making This Test More Readable"),Object(l.a)("hr",null),Object(l.a)("h3",null,"hide less important details from the user, so that more important details are most prominent"),Object(l.a)("hr",null),Object(l.a)("p",null,"The examples below are not about what this test is doing at a high level"),Object(l.a)("br",null),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"setting up a ",Object(l.a)("inlineCode",{parentName:"li"},"vector<ScoredDocument>")),Object(l.a)("li",{parentName:"ul"},"url, score, and docs[], which are just details about how the underlying C++ objects are set up")),Object(l.a)("hr",null),Object(l.a)("h3",null,"As a first step in cleaning this up, we could create a helper function like:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"void MakeScoredDoc(ScoredDocument* sd, double score, string url) {\n    sd->score = score;\n    sd->url = url;\n}\n")),Object(l.a)("hr",null),Object(l.a)("h3",null,"Using this function, our test code becomes slightly more compact:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'void Test1() {\n    vector<ScoredDocument> docs;\n    docs.resize(5);\n    MakeScoredDoc(&docs[0], -5.0, "http://example.com");\n    MakeScoredDoc(&docs[1], 1, "http://example.com");\n    MakeScoredDoc(&docs[2], 4, "http://example.com");\n    MakeScoredDoc(&docs[3], -99998.7, "http://example.com");\n    ...\n}\n')),Object(l.a)("hr",null),Object(l.a)("h3",null,"But this isn't good enough"),Object(l.a)("hr",null),Object(l.a)("p",null,"there are still unimportant details in our face"),Object(l.a)("hr",null),Object(l.a)("div",{className:"aligncenter",style:{width:"50%"}},Object(l.a)("h4",null,"for instance"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},'the parameter "',Object(l.a)("a",c({parentName:"li"},{href:"http://example.com"}),"http://example.com"),'" is just an eyesore.',Object(l.a)("blockquote",{parentName:"li"},Object(l.a)("p",{parentName:"blockquote"},"It's always the same, and the exact URL doesn't even matter - it's just needed to fill out a valid ScoredDocument."))),Object(l.a)("li",{parentName:"ul"},"docs.resize(5) and &docs","[0]",", &docs","[1]",", and so on"))),Object(l.a)("hr",null),Object(l.a)("h3",null,"Let's change our helper function to do more work for us and call it AddScoredDoc():"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'void AddScoredDoc(vector<ScoredDocument>& docs, double score) {\n    ScoredDocument sd;\n    sd.score = score;\n    sd.url = "http://example.com";\n    docs.push_back(sd);\n}\n')),Object(l.a)("hr",null),Object(l.a)("h3",null,"Using this function, our test code is even more compact:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"void Test1() {\n    vector<ScoredDocument> docs;\n    AddScoredDoc(docs, -5.0);\n    AddScoredDoc(docs, 1);\n    AddScoredDoc(docs, 4);\n    AddScoredDoc(docs, -99998.7);\n    ...\n}\n")),Object(l.a)("hr",null),Object(l.a)("h3",null,'still doesn\'t pass the "highly readable and writable" test'),Object(l.a)("hr",null),Object(l.a)("p",null,"If you wanted to add another test with a new set of scored docs, it would require a lot of copying and pasting."),Object(l.a)("hr",null),Object(l.a)("p",null,"So how do we go about improving it further?"),Object(l.a)("hr",null),Object(l.a)("h2",null,"Creating the Minimal Test Statement"),Object(l.a)("hr",null),Object(l.a)("p",null,"To improve this test code, let's use the technique from Chapter 12, Turning Thoughts into Code."),Object(l.a)("hr",null),Object(l.a)("h3",null,"Let's describe what our test is trying to do in plain English:"),Object(l.a)("hr",null),Object(l.a)("blockquote",null,Object(l.a)("p",{parentName:"blockquote"},"We have a list of documents whose scores are ","[-5, 1, 4, -99998.7, 3]","."),Object(l.a)("br",null),"AfterSortAndFilterDocs(), the remaining documents should have scores of [4, 3, 1], in that order."),Object(l.a)("hr",null),Object(l.a)("p",null,"As you can see, nowhere in that description did we mention a ",Object(l.a)("inlineCode",{parentName:"p"},"vector<ScoredDocument>"),"."),Object(l.a)("hr",null),Object(l.a)("p",null,"The array of scores is what's most important here."),Object(l.a)("hr",null),Object(l.a)("h3",null,"Ideally, our test code would look something like:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'CheckScoresBeforeAfter("-5, 1, 4, -99998.7, 3",  "4, 3, 1");\n')),Object(l.a)("hr",null),Object(l.a)("h4",null,"We were able to boil the essence of this test down to one line of code!😂"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"The essence of most tests boils down to ",Object(l.a)("em",{parentName:"li"},"for this input/situation, expect this behavior/output"),"."),Object(l.a)("li",{parentName:"ul"},"In many cases, this goal can be expressed in just one line."),Object(l.a)("li",{parentName:"ul"},"Makes it very easy to add more test cases.")),Object(l.a)("hr",null),Object(l.a)("h2",null,'Implementing Custom "Minilanguages"'),Object(l.a)("hr",null),Object(l.a)("blockquote",null,Object(l.a)("p",{parentName:"blockquote"},"Notice that CheckScoresBeforeAfter() takes two string arguments that describe the array of scores.")),Object(l.a)("blockquote",null,Object(l.a)("p",{parentName:"blockquote"},"In later versions of C++, you can pass in array literals like this:")),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"CheckScoresBeforeAfter({-5, 1, 4, -99998.7, 3}, {4, 3, 1});\n")),Object(l.a)("blockquote",null,Object(l.a)("p",{parentName:"blockquote"},"Because we couldn't do this at the time, we put the scores inside a string, separated by commas.For this approach to work, CheckScoresBeforeAfter() is going to have to parse those string arguments.")),Object(l.a)("blockquote",null,Object(l.a)("p",{parentName:"blockquote"},"In general, defining a custom minilanguage can be a powerful way to express a lot of information in a small amount of space.Other examples include printf() and regular expression libraries.")),Object(l.a)("blockquote",null,Object(l.a)("p",{parentName:"blockquote"},"In this case, writing some helper functions to parse a comma-separated list of numbers shouldn't be too hard.")),Object(l.a)("hr",null),Object(l.a)("p",null,"In general, I thought that mini-language refers to DSL. . .🤔"),Object(l.a)("hr",null),Object(l.a)("h4",null,"Here's what CheckScoresBeforeAfter() would look like:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"void CheckScoresBeforeAfter(string input, string expected_output) {\n    vector<ScoredDocument> docs = ScoredDocsFromString(input);\n    SortAndFilterDocs(&docs);\n    string output = ScoredDocsToString(docs);\n    assert(output == expected_output);\n}\n")),Object(l.a)("hr",null),Object(l.a)("h4",null,"And for completeness, here are the helper functions that convert between string and ",Object(l.a)("inlineCode",{parentName:"h4"},"vector<ScoredDocument>"),":"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"vector<ScoredDocument> ScoredDocsFromString(string scores) {\n    vector<ScoredDocument> docs;\n\n    replace(scores.begin(), scores.end(), ',', ' ');\n\n    // Populate 'docs' from a string of space-separated scores.\n    istringstream stream(scores);\n    double score;\n    while (stream >> score) {\n        AddScoredDoc(docs, score);\n    }\n\n    return docs;\n}\n\nstring ScoredDocsToString(vector<ScoredDocument> docs) {\n    ostringstream stream;\n    for (int i = 0; i < docs.size(); i++) {\n        if (i > 0) stream << \", \";\n        stream << docs[i].score;\n    }\n\n    return stream.str();\n}\n")),Object(l.a)("hr",null),Object(l.a)("p",null,"This may seem like a lot of code at first glance, but what it lets you do is incredibly powerful."),Object(l.a)("hr",null),Object(l.a)("p",null,"Because you can write an entire test with just one call to CheckScoresBeforeAfter(), you'll be inclined to add more tests (as we'll be doing later in the chapter)."))}p.isMDXComponent=!0},function(e,t,n){"use strict";n.r(t),n.d(t,"slides",(function(){return s})),n.d(t,"fusumaProps",(function(){return u})),n.d(t,"default",(function(){return p}));var a=n(2),r=n.n(a),l=n(0);function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var s=[function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"Making Error Messages Readable"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"The preceding code was nice, but what happens when that ",Object(l.a)("em",{parentName:"p"},"assert(output == expected_output)")," line fails?🤔"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"It produces an error message like this:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"Assertion failed: (output == expected_output),\n    function CheckScoresBeforeAfter, file test.cc, line 37.\n\n")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Obviously, if you ever saw this error, you'd wonder, ",Object(l.a)("em",{parentName:"p"},"What were the values of output and expected_output?🤔")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"Using Better Versions of assert()"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Fortunately, most languages and libraries have more sophisticated versions of assert() you can use. So instead of writing:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"assert(output == expected_output);\n")),Object(l.a)("p",null,"you could use the Boost C++ library:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"BOOST_REQUIRE_EQUAL(output, expected_output)\n")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"Now, if the test fails, you get a more detailed message like:"),Object(l.a)("br",null),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-bash"}),'test.cc(37): fatal error in "CheckScoresBeforeAfter": critical check\n    output == expected_output failed ["1, 3, 4" != "4, 3, 1"]\n')),Object(l.a)("p",null,"which is much more helpful."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("img",{src:n(3)}))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"power-assert"),Object(l.a)("br",null),Object(l.a)("blockquote",null,Object(l.a)("p",{parentName:"blockquote"},Object(l.a)("a",c({parentName:"p"},{href:"https://github.com/power-assert-js/power-assert"}),"https://github.com/power-assert-js/power-assert"))),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-bash"}),'  $ $(npm bin)/mocha --require intelli-espower-loader path/to/test/mocha_node.js\n\n\n  Array\n    #indexOf()\n      1) should return index when the value is present\n      2) should return -1 when the value is not present\n\n  various types\n    3) demo\n\n\n  0 passing (43ms)\n  3 failing\n\n  1) Array #indexOf() should return index when the value is present:\n\n      AssertionError:   # test/example2.js:13\n\n  assert(ary.indexOf(zero) === two)\n         |   |       |     |   |\n         |   |       |     |   2\n         |   -1      0     false\n         [1,2,3]\n\n  [number] two\n  => 2\n  [number] ary.indexOf(zero)\n  => -1\n\n      + expected - actual\n\n      -false\n      +true\n\n      at Context.it (test/example2.js:13:13)\n\n  2) Array #indexOf() should return -1 when the value is not present:\n\n      AssertionError: THIS IS AN ASSERTION MESSAGE   # test/example2.js:17\n\n  assert.ok(ary.indexOf(two) === minusOne, \'THIS IS AN ASSERTION MESSAGE\')\n            |   |       |    |   |\n            |   |       |    |   -1\n            |   1       2    false\n            [1,2,3]\n\n  [number] minusOne\n  => -1\n  [number] ary.indexOf(two)\n  => 1\n\n      + expected - actual\n\n      -false\n      +true\n\n      at Context.it (test/example2.js:17:20)\n\n  3) various types demo:\n\n      AssertionError:   # test/example2.js:43\n\n  assert(types[index].name === bob.name)\n         |    ||      |    |   |   |\n         |    ||      |    |   |   "bob"\n         |    ||      |    |   Person{name:"bob",age:5}\n         |    ||      |    false\n         |    |11     "alice"\n         |    Person{name:"alice",age:3}\n         ["string",98.6,true,false,null,undefined,#Array#,#Object#,NaN,Infinity,/^not/,#Person#]\n\n  --- [string] bob.name\n  +++ [string] types[index].name\n  @@ -1,3 +1,5 @@\n  -bob\n  +alice\n\n\n      + expected - actual\n\n      -false\n      +true\n\n      at Context.it (test/example2.js:43:9)\n')))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"Hand-Crafted Error Messages"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Using BOOST_REQUIRE_EQUAL(), we were able to get the nicer error message:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'output == expected_output failed ["1, 3, 4" != "4, 3, 1"]\n')))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"However, this message could be improved further."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"For instance, it would be useful to see the original input that triggered this failure."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"The ideal error message would be something like:"),Object(l.a)("br",null),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-bash"}),'CheckScoresBeforeAfter() failed,\n  Input:           "-5, 1, 4, -99998.7, 3"\n  Expected Output: "4, 3, 1"\n  Actual Output:   "1, 3, 4"\n')))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"If this is what you want, go ahead and write it!"),Object(l.a)("br",null),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'void CheckScoresBeforeAfter(...) {\n    ...\n    if (output != expected_output) {\n        cerr << "CheckScoresBeforeAfter() failed," << endl;\n        cerr << "Input:           \\"" << input << "\\"" << endl;\n        cerr << "Expected Output: \\"" << expected_output << "\\"" << endl;\n        cerr << "Actual Output:   \\"" << output << "\\"" << endl;\n        abort();\n    }\n')))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"The moral of the story is that error messages should be as helpful as possible."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,'Sometimes, printing your own message by building a "custom assert" is the best way to do this.'))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"Example"),Object(l.a)("h4",null,"assert-exception"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("a",c({parentName:"li"},{href:"https://github.com/59naga/assert-exception"}),"https://github.com/59naga/assert-exception")),Object(l.a)("li",{parentName:"ul"},Object(l.a)("a",c({parentName:"li"},{href:"https://qiita.com/59naga/items/765e8faa64b4f0defc85"}),"https://qiita.com/59naga/items/765e8faa64b4f0defc85"))))}],u=[{classes:"title"},{},{},{},{},{},{},{classes:"reference"},{classes:"reference"},{},{},{},{},{},{},{},{},{classes:"reference"}],i={slides:s},b="wrapper";function p(e){var t=e.components,a=o(e,["components"]);return Object(l.a)(b,c({},i,a,{components:t,mdxType:"MDXLayout"}),Object(l.a)("h2",null,"Making Error Messages Readable"),Object(l.a)("hr",null),Object(l.a)("p",null,"The preceding code was nice, but what happens when that ",Object(l.a)("em",{parentName:"p"},"assert(output == expected_output)")," line fails?🤔"),Object(l.a)("hr",null),Object(l.a)("p",null,"It produces an error message like this:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"Assertion failed: (output == expected_output),\n    function CheckScoresBeforeAfter, file test.cc, line 37.\n\n")),Object(l.a)("hr",null),Object(l.a)("p",null,"Obviously, if you ever saw this error, you'd wonder, ",Object(l.a)("em",{parentName:"p"},"What were the values of output and expected_output?🤔")),Object(l.a)("hr",null),Object(l.a)("h2",null,"Using Better Versions of assert()"),Object(l.a)("hr",null),Object(l.a)("p",null,"Fortunately, most languages and libraries have more sophisticated versions of assert() you can use. So instead of writing:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"assert(output == expected_output);\n")),Object(l.a)("p",null,"you could use the Boost C++ library:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"BOOST_REQUIRE_EQUAL(output, expected_output)\n")),Object(l.a)("hr",null),Object(l.a)("h3",null,"Now, if the test fails, you get a more detailed message like:"),Object(l.a)("br",null),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-bash"}),'test.cc(37): fatal error in "CheckScoresBeforeAfter": critical check\n    output == expected_output failed ["1, 3, 4" != "4, 3, 1"]\n')),Object(l.a)("p",null,"which is much more helpful."),Object(l.a)("hr",null),Object(l.a)("img",{src:n(3)}),Object(l.a)("hr",null),Object(l.a)("h3",null,"power-assert"),Object(l.a)("br",null),Object(l.a)("blockquote",null,Object(l.a)("p",{parentName:"blockquote"},Object(l.a)("a",c({parentName:"p"},{href:"https://github.com/power-assert-js/power-assert"}),"https://github.com/power-assert-js/power-assert"))),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-bash"}),'  $ $(npm bin)/mocha --require intelli-espower-loader path/to/test/mocha_node.js\n\n\n  Array\n    #indexOf()\n      1) should return index when the value is present\n      2) should return -1 when the value is not present\n\n  various types\n    3) demo\n\n\n  0 passing (43ms)\n  3 failing\n\n  1) Array #indexOf() should return index when the value is present:\n\n      AssertionError:   # test/example2.js:13\n\n  assert(ary.indexOf(zero) === two)\n         |   |       |     |   |\n         |   |       |     |   2\n         |   -1      0     false\n         [1,2,3]\n\n  [number] two\n  => 2\n  [number] ary.indexOf(zero)\n  => -1\n\n      + expected - actual\n\n      -false\n      +true\n\n      at Context.it (test/example2.js:13:13)\n\n  2) Array #indexOf() should return -1 when the value is not present:\n\n      AssertionError: THIS IS AN ASSERTION MESSAGE   # test/example2.js:17\n\n  assert.ok(ary.indexOf(two) === minusOne, \'THIS IS AN ASSERTION MESSAGE\')\n            |   |       |    |   |\n            |   |       |    |   -1\n            |   1       2    false\n            [1,2,3]\n\n  [number] minusOne\n  => -1\n  [number] ary.indexOf(two)\n  => 1\n\n      + expected - actual\n\n      -false\n      +true\n\n      at Context.it (test/example2.js:17:20)\n\n  3) various types demo:\n\n      AssertionError:   # test/example2.js:43\n\n  assert(types[index].name === bob.name)\n         |    ||      |    |   |   |\n         |    ||      |    |   |   "bob"\n         |    ||      |    |   Person{name:"bob",age:5}\n         |    ||      |    false\n         |    |11     "alice"\n         |    Person{name:"alice",age:3}\n         ["string",98.6,true,false,null,undefined,#Array#,#Object#,NaN,Infinity,/^not/,#Person#]\n\n  --- [string] bob.name\n  +++ [string] types[index].name\n  @@ -1,3 +1,5 @@\n  -bob\n  +alice\n\n\n      + expected - actual\n\n      -false\n      +true\n\n      at Context.it (test/example2.js:43:9)\n')),Object(l.a)("hr",null),Object(l.a)("h2",null,"Hand-Crafted Error Messages"),Object(l.a)("hr",null),Object(l.a)("p",null,"Using BOOST_REQUIRE_EQUAL(), we were able to get the nicer error message:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'output == expected_output failed ["1, 3, 4" != "4, 3, 1"]\n')),Object(l.a)("hr",null),Object(l.a)("p",null,"However, this message could be improved further."),Object(l.a)("hr",null),Object(l.a)("p",null,"For instance, it would be useful to see the original input that triggered this failure."),Object(l.a)("hr",null),Object(l.a)("h3",null,"The ideal error message would be something like:"),Object(l.a)("br",null),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-bash"}),'CheckScoresBeforeAfter() failed,\n  Input:           "-5, 1, 4, -99998.7, 3"\n  Expected Output: "4, 3, 1"\n  Actual Output:   "1, 3, 4"\n')),Object(l.a)("hr",null),Object(l.a)("h3",null,"If this is what you want, go ahead and write it!"),Object(l.a)("br",null),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'void CheckScoresBeforeAfter(...) {\n    ...\n    if (output != expected_output) {\n        cerr << "CheckScoresBeforeAfter() failed," << endl;\n        cerr << "Input:           \\"" << input << "\\"" << endl;\n        cerr << "Expected Output: \\"" << expected_output << "\\"" << endl;\n        cerr << "Actual Output:   \\"" << output << "\\"" << endl;\n        abort();\n    }\n')),Object(l.a)("hr",null),Object(l.a)("p",null,"The moral of the story is that error messages should be as helpful as possible."),Object(l.a)("hr",null),Object(l.a)("p",null,'Sometimes, printing your own message by building a "custom assert" is the best way to do this.'),Object(l.a)("hr",null),Object(l.a)("h3",null,"Example"),Object(l.a)("h4",null,"assert-exception"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("a",c({parentName:"li"},{href:"https://github.com/59naga/assert-exception"}),"https://github.com/59naga/assert-exception")),Object(l.a)("li",{parentName:"ul"},Object(l.a)("a",c({parentName:"li"},{href:"https://qiita.com/59naga/items/765e8faa64b4f0defc85"}),"https://qiita.com/59naga/items/765e8faa64b4f0defc85"))))}p.isMDXComponent=!0},function(e,t,n){"use strict";n.r(t),n.d(t,"slides",(function(){return s})),n.d(t,"fusumaProps",(function(){return u})),n.d(t,"default",(function(){return p}));var a=n(2),r=n.n(a),l=n(0);function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var s=[function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"Choosing Good Test Inputs"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"There's an art to choosing good input values for your tests."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"The ones we have right now seem a bit haphazard:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'CheckScoresBeforeAfter("-5, 1, 4, -99998.7, 3",  "4, 3, 1");\n')))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"How do we choose good input values?🤔"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Good inputs should thoroughly test the code."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"But they should also be simple so that they're easy to read."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"KEY IDEA"),Object(l.a)("p",null,Object(l.a)("em",{parentName:"p"},"In general, you should pick the simplest set of inputs that completely exercise the code.")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"For example, suppose we had just written:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'CheckScoresBeforeAfter("1, 2, 3", "3, 2, 1");\n')))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,'Although this test is simple, it doesn\'t test the "filter negative scores" behavior of SortAndFilterDocs().'))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"If there were a bug in that part of the code, this input wouldn't trigger it."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"On the other extreme, suppose we wrote our test like this:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'CheckScoresBeforeAfter("123014, -1082342, 823423, 234205, -235235",\n                       "823423, 234205, 123014");\n')),Object(l.a)("p",null,"These values are needlessly complex. (And they don't even test the code thoroughly.)"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"Simplifying the Input Values"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"So what can we do to improve these input values?"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'CheckScoresBeforeAfter("-5, 1, 4, -99998.7, 3",  "4, 3, 1");\n')))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,'the very "loud" value'))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("blockquote",null,Object(l.a)("p",{parentName:"blockquote"},"-99998.7")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,'That value was just meant to be "any negative number,"'))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"so a simpler value is just"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("blockquote",null,Object(l.a)("p",{parentName:"blockquote"},"-1")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,'(If -99998.7 was meant to be "a very negative number," a better value would have been something crisp like -1e100.)'))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"KEY IDEA"),Object(l.a)("p",null,Object(l.a)("em",{parentName:"p"},"Prefer clean and simple test values that still get the job done.")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"The other values in our test aren't too bad, but while we're here, we can reduce them to the simplest integers possible."),Object(l.a)("li",{parentName:"ul"},"Also, only one negative value is needed to test that negative values are removed.")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Here's a new version of our test:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'CheckScoresBeforeAfter("1, 2, -1, 3", "3, 2, 1");\n')))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"We've simplified the test values without making them any less effective."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("blockquote",null,Object(l.a)("p",{parentName:"blockquote"},"thoroughly test")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"What are the 7 principles of testing?"),Object(l.a)("br",null),Object(l.a)("blockquote",null,Object(l.a)("p",{parentName:"blockquote"},"2) Exhaustive testing is impossible: Testing everything including all combinations of inputs and preconditions is not possible. So, instead of doing the exhaustive testing we can use risks and priorities to focus testing efforts. For example: In an application in one screen there are 15 input fields, each having 5 possible values, then to test all the valid combinations you would need 30  517  578  125  (515) tests. This is very unlikely that the project timescales would allow for this number of tests. So, accessing and managing risk is one of the most important activities and reason for testing in any project.")),Object(l.a)("br",null),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("a",c({parentName:"li"},{href:"http://tryqa.com/what-are-the-principles-of-testing/"}),"http://tryqa.com/what-are-the-principles-of-testing/"))))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"technique of Black Box testing"),Object(l.a)("br",null),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"Equivalence partitioning"),Object(l.a)("li",{parentName:"ul"},"Boundary Value Analysis")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,'LARGE "SMASHER" TESTS'))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"Non-functional testing includes:"),Object(l.a)("br",null),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"Reliability testing"),Object(l.a)("li",{parentName:"ul"},"Usability testing"),Object(l.a)("li",{parentName:"ul"},"Efficiency testing"),Object(l.a)("li",{parentName:"ul"},"Maintainability testing"),Object(l.a)("li",{parentName:"ul"},"Portability testing"),Object(l.a)("li",{parentName:"ul"},"Baseline testing"),Object(l.a)("li",{parentName:"ul"},"Compliance testing"),Object(l.a)("li",{parentName:"ul"},"Documentation testing"),Object(l.a)("li",{parentName:"ul"},"Endurance testing"),Object(l.a)("li",{parentName:"ul"},"Load testing"),Object(l.a)("li",{parentName:"ul"},"Performance testing"),Object(l.a)("li",{parentName:"ul"},"Compatibility testing"),Object(l.a)("li",{parentName:"ul"},"Security testing"),Object(l.a)("li",{parentName:"ul"},"Scalability testing"),Object(l.a)("li",{parentName:"ul"},"Volume testing"),Object(l.a)("li",{parentName:"ul"},"Stress testing"),Object(l.a)("li",{parentName:"ul"},"Recovery testing"),Object(l.a)("li",{parentName:"ul"},"Internationalization testing and Localization testing")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"Multiple Tests of Functionality"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("div",{style:{display:"flex",width:"fit-content",margin:"0 auto"}},Object(l.a)("div",null,Object(l.a)("h4",null,'to construct a single "perfect" input'),Object(l.a)("p",null,"to thoroughly exercise your code")),Object(l.a)("div",{style:{display:"flex",flexDirection:"column",justifyContent:"center",margin:"0 20px"}},Object(l.a)("p",null,"<")),Object(l.a)("div",null,Object(l.a)("h4",null,"to write multiple smaller tests"),Object(l.a)("p",null,"it's often easier, more effective, and more readable"))))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Each test should push your code in a certain direction, trying to find a particular bug."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"For example, here are four tests for SortAndFilterDocs():"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'CheckScoresBeforeAfter("2, 1, 3", "3, 2, 1");    // Basic sorting\nCheckScoresBeforeAfter("0, -0.1, -10", "0");     // All values < 0 removed\nCheckScoresBeforeAfter("1, -2, 1, -2", "1, 1");  // Duplicates not a problem\nCheckScoresBeforeAfter("", "");                  // Empty input OK\n')))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"There are even more tests you could write if you wanted to be extremely thorough."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Having separate test cases also makes it easier for the next person working on the code."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"If someone accidentally introduces a bug, the test failure will pinpoint the specific test that failed."))}],u=[{classes:"title"},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{note:"10の100乗"},{},{note:"その他の値はもっと単純にできるね\nマイナスをテストするのは一つだけあればいいね"},{},{},{classes:"reference"},{classes:"reference"},{classes:"reference"},{},{classes:"reference"},{},{},{note:"複数のテストで別々の方向からバグを見つけられるようにする"},{},{},{},{}],i={slides:s},b="wrapper";function p(e){var t=e.components,n=o(e,["components"]);return Object(l.a)(b,c({},i,n,{components:t,mdxType:"MDXLayout"}),Object(l.a)("h2",null,"Choosing Good Test Inputs"),Object(l.a)("hr",null),Object(l.a)("p",null,"There's an art to choosing good input values for your tests."),Object(l.a)("hr",null),Object(l.a)("p",null,"The ones we have right now seem a bit haphazard:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'CheckScoresBeforeAfter("-5, 1, 4, -99998.7, 3",  "4, 3, 1");\n')),Object(l.a)("hr",null),Object(l.a)("p",null,"How do we choose good input values?🤔"),Object(l.a)("hr",null),Object(l.a)("p",null,"Good inputs should thoroughly test the code."),Object(l.a)("hr",null),Object(l.a)("p",null,"But they should also be simple so that they're easy to read."),Object(l.a)("hr",null),Object(l.a)("h2",null,"KEY IDEA"),Object(l.a)("p",null,Object(l.a)("em",{parentName:"p"},"In general, you should pick the simplest set of inputs that completely exercise the code.")),Object(l.a)("hr",null),Object(l.a)("p",null,"For example, suppose we had just written:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'CheckScoresBeforeAfter("1, 2, 3", "3, 2, 1");\n')),Object(l.a)("hr",null),Object(l.a)("p",null,'Although this test is simple, it doesn\'t test the "filter negative scores" behavior of SortAndFilterDocs().'),Object(l.a)("hr",null),Object(l.a)("p",null,"If there were a bug in that part of the code, this input wouldn't trigger it."),Object(l.a)("hr",null),Object(l.a)("p",null,"On the other extreme, suppose we wrote our test like this:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'CheckScoresBeforeAfter("123014, -1082342, 823423, 234205, -235235",\n                       "823423, 234205, 123014");\n')),Object(l.a)("p",null,"These values are needlessly complex. (And they don't even test the code thoroughly.)"),Object(l.a)("hr",null),Object(l.a)("h2",null,"Simplifying the Input Values"),Object(l.a)("hr",null),Object(l.a)("p",null,"So what can we do to improve these input values?"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'CheckScoresBeforeAfter("-5, 1, 4, -99998.7, 3",  "4, 3, 1");\n')),Object(l.a)("hr",null),Object(l.a)("h3",null,'the very "loud" value'),Object(l.a)("hr",null),Object(l.a)("blockquote",null,Object(l.a)("p",{parentName:"blockquote"},"-99998.7")),Object(l.a)("hr",null),Object(l.a)("p",null,'That value was just meant to be "any negative number,"'),Object(l.a)("hr",null),Object(l.a)("h3",null,"so a simpler value is just"),Object(l.a)("hr",null),Object(l.a)("blockquote",null,Object(l.a)("p",{parentName:"blockquote"},"-1")),Object(l.a)("hr",null),Object(l.a)("p",null,'(If -99998.7 was meant to be "a very negative number," a better value would have been something crisp like -1e100.)'),Object(l.a)("hr",null),Object(l.a)("h2",null,"KEY IDEA"),Object(l.a)("p",null,Object(l.a)("em",{parentName:"p"},"Prefer clean and simple test values that still get the job done.")),Object(l.a)("hr",null),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"The other values in our test aren't too bad, but while we're here, we can reduce them to the simplest integers possible."),Object(l.a)("li",{parentName:"ul"},"Also, only one negative value is needed to test that negative values are removed.")),Object(l.a)("hr",null),Object(l.a)("p",null,"Here's a new version of our test:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'CheckScoresBeforeAfter("1, 2, -1, 3", "3, 2, 1");\n')),Object(l.a)("hr",null),Object(l.a)("p",null,"We've simplified the test values without making them any less effective."),Object(l.a)("hr",null),Object(l.a)("blockquote",null,Object(l.a)("p",{parentName:"blockquote"},"thoroughly test")),Object(l.a)("hr",null),Object(l.a)("h3",null,"What are the 7 principles of testing?"),Object(l.a)("br",null),Object(l.a)("blockquote",null,Object(l.a)("p",{parentName:"blockquote"},"2) Exhaustive testing is impossible: Testing everything including all combinations of inputs and preconditions is not possible. So, instead of doing the exhaustive testing we can use risks and priorities to focus testing efforts. For example: In an application in one screen there are 15 input fields, each having 5 possible values, then to test all the valid combinations you would need 30  517  578  125  (515) tests. This is very unlikely that the project timescales would allow for this number of tests. So, accessing and managing risk is one of the most important activities and reason for testing in any project.")),Object(l.a)("br",null),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},Object(l.a)("a",c({parentName:"li"},{href:"http://tryqa.com/what-are-the-principles-of-testing/"}),"http://tryqa.com/what-are-the-principles-of-testing/"))),Object(l.a)("hr",null),Object(l.a)("h3",null,"technique of Black Box testing"),Object(l.a)("br",null),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"Equivalence partitioning"),Object(l.a)("li",{parentName:"ul"},"Boundary Value Analysis")),Object(l.a)("hr",null),Object(l.a)("h2",null,'LARGE "SMASHER" TESTS'),Object(l.a)("hr",null),Object(l.a)("h3",null,"Non-functional testing includes:"),Object(l.a)("br",null),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"Reliability testing"),Object(l.a)("li",{parentName:"ul"},"Usability testing"),Object(l.a)("li",{parentName:"ul"},"Efficiency testing"),Object(l.a)("li",{parentName:"ul"},"Maintainability testing"),Object(l.a)("li",{parentName:"ul"},"Portability testing"),Object(l.a)("li",{parentName:"ul"},"Baseline testing"),Object(l.a)("li",{parentName:"ul"},"Compliance testing"),Object(l.a)("li",{parentName:"ul"},"Documentation testing"),Object(l.a)("li",{parentName:"ul"},"Endurance testing"),Object(l.a)("li",{parentName:"ul"},"Load testing"),Object(l.a)("li",{parentName:"ul"},"Performance testing"),Object(l.a)("li",{parentName:"ul"},"Compatibility testing"),Object(l.a)("li",{parentName:"ul"},"Security testing"),Object(l.a)("li",{parentName:"ul"},"Scalability testing"),Object(l.a)("li",{parentName:"ul"},"Volume testing"),Object(l.a)("li",{parentName:"ul"},"Stress testing"),Object(l.a)("li",{parentName:"ul"},"Recovery testing"),Object(l.a)("li",{parentName:"ul"},"Internationalization testing and Localization testing")),Object(l.a)("hr",null),Object(l.a)("h2",null,"Multiple Tests of Functionality"),Object(l.a)("hr",null),Object(l.a)("div",{style:{display:"flex",width:"fit-content",margin:"0 auto"}},Object(l.a)("div",null,Object(l.a)("h4",null,'to construct a single "perfect" input'),Object(l.a)("p",null,"to thoroughly exercise your code")),Object(l.a)("div",{style:{display:"flex",flexDirection:"column",justifyContent:"center",margin:"0 20px"}},Object(l.a)("p",null,"<")),Object(l.a)("div",null,Object(l.a)("h4",null,"to write multiple smaller tests"),Object(l.a)("p",null,"it's often easier, more effective, and more readable"))),Object(l.a)("hr",null),Object(l.a)("p",null,"Each test should push your code in a certain direction, trying to find a particular bug."),Object(l.a)("hr",null),Object(l.a)("p",null,"For example, here are four tests for SortAndFilterDocs():"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'CheckScoresBeforeAfter("2, 1, 3", "3, 2, 1");    // Basic sorting\nCheckScoresBeforeAfter("0, -0.1, -10", "0");     // All values < 0 removed\nCheckScoresBeforeAfter("1, -2, 1, -2", "1, 1");  // Duplicates not a problem\nCheckScoresBeforeAfter("", "");                  // Empty input OK\n')),Object(l.a)("hr",null),Object(l.a)("p",null,"There are even more tests you could write if you wanted to be extremely thorough."),Object(l.a)("hr",null),Object(l.a)("p",null,"Having separate test cases also makes it easier for the next person working on the code."),Object(l.a)("hr",null),Object(l.a)("p",null,"If someone accidentally introduces a bug, the test failure will pinpoint the specific test that failed."))}p.isMDXComponent=!0},function(e,t,n){"use strict";n.r(t),n.d(t,"slides",(function(){return s})),n.d(t,"fusumaProps",(function(){return u})),n.d(t,"default",(function(){return p}));var a=n(2),r=n.n(a),l=n(0);function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var s=[function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"Naming Test Functions"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Test code is typically organized into functions-one for each method and/or situation you're testing."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"For instance, the code testing ",Object(l.a)("inlineCode",{parentName:"p"},"SortAndFilterDocs()")," was inside a function named ",Object(l.a)("inlineCode",{parentName:"p"},"Test1()"),":"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"void Test1() {\n    ...\n}\n")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Picking a good name for a test function can seem tedious and irrelevant, but don't resort to meaningless names like Test1(), Test2(), and the like."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Instead, you should use the name to describe details about the test."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"In particular, it's handy if the person reading the test code can quickly figure out:"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"The class being tested (if any)"),Object(l.a)("li",{parentName:"ul"},"The function being tested"),Object(l.a)("li",{parentName:"ul"},"The situation or bug being tested")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,'A simple approach to construct a good test function name is to just concatenate that information together, possibly with a "Test_" prefix.'))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"For instance, instead of naming it ",Object(l.a)("inlineCode",{parentName:"p"},"Test1()"),", we can use the ",Object(l.a)("inlineCode",{parentName:"p"},"Test_<FunctionName>()")," format:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"void Test_SortAndFilterDocs() {\n    ...\n}\n")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Depending on how sophisticated this test is, you might consider a separate test function for each situation being tested."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"You could use the ",Object(l.a)("inlineCode",{parentName:"p"},"Test_<FunctionName>_<Situation>()")," format:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"void Test_SortAndFilterDocs_BasicSorting() {\n    ...\n}\n\nvoid Test_SortAndFilterDocs_NegativeValues() {\n    ...\n}\n\n...\n")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h4",null,"Don't be afraid of having a long or clunky name here."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"not called throughout your codebase"),Object(l.a)("li",{parentName:"ul"},"effectively acting like a comment",Object(l.a)("li",{style:{color:"var(--color-js)"}},"most testing frameworks will print out the name of the function where the assertion failed",Object(l.a)("ul",null,Object(l.a)("li",null,"so a descriptive name is especially helpful"))))))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Note that if you're using a testing framework, there might already be rules or conventions on how methods are named."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,'For instance, the Python unit test module expects test method names to start with "test."'))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"When it comes to naming helper functions in your test code,"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,'it\'s useful to highlight whether the function does any assertions itself or is just an ordinary "test-unaware" helper.'))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"For instance, in this chapter, any helper function that calls assert() is named Check...()."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"But the function AddScoredDoc() was named just like an ordinary helper function."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Isn't it easier to define in sentences if the method name is so descriptive?"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"「日本語テストメソッドについてどう思いますか？」"),Object(l.a)("p",null,Object(l.a)("a",c({parentName:"p"},{href:"https://www.slideshare.net/kenjikumaie/ss-25876730"}),"https://www.slideshare.net/kenjikumaie/ss-25876730")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"「TDD／BDDの思想とテスティングフレームワークの関係を整理しよう」"),Object(l.a)("p",null,Object(l.a)("a",c({parentName:"p"},{href:"https://www.atmarkit.co.jp/ait/articles/1403/25/news033.html"}),"https://www.atmarkit.co.jp/ait/articles/1403/25/news033.html")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"「RSpecしぐさ 〜歴史から学ぶRSpec〜」"),Object(l.a)("p",null,Object(l.a)("a",c({parentName:"p"},{href:"https://www.slideshare.net/takafumionaka/rspec-83693226"}),"https://www.slideshare.net/takafumionaka/rspec-83693226")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("img",{src:n(3)}))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("img",{src:n(5)}))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,'I recommend you to read appendix c of translated "test-driven development".'))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"Summary"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},'"TDD" is misleading. What is the "Test"?'),Object(l.a)("li",{parentName:"ul"},'The word "Test" does not refer to "automated", "implitated" or "clear" so-called "test activities" such as "automated test"'),Object(l.a)("li",{parentName:"ul"},'As a result, "Test" was changed to "Behaviour" again'),Object(l.a)("li",{parentName:"ul"},'Emergence of "RSpec"'),Object(l.a)("li",{parentName:"ul"},'Emergence of "Cucumber"',Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},"More suitable for acceptance test"),Object(l.a)("li",{parentName:"ul"},'In Japan, QA Engineer often use this format in a context "automated test".')))))}],u=[{classes:"title"},{note:"テストする関数や状況に応じてひとまとめにするよ"},{},{note:"手抜くなよ"},{note:"テストの内容を表した名前をつけなはれ"},{note:"これらがあると助かるよきっと"},{note:"Test_プレフィックスつけるっていうやつ"},{},{note:"状況に応じて分割しろ"},{},{},{note:"実際に呼ばれるわけじゃないし、コメントのように振る舞うし、大抵のテスティングフレームワークはメソッド名表示してくれるし"},{},{},{note:"テスト用のヘルパーなのかもっと一般的なヘルパーなのか分かるようにしておけよ"},{},{},{},{classes:"reference"},{classes:"reference"},{classes:"reference"},{classes:"reference"},{classes:"reference"},{classes:"reference"},{classes:"reference"},{classes:"reference"},{classes:"reference"}],i={slides:s},b="wrapper";function p(e){var t=e.components,a=o(e,["components"]);return Object(l.a)(b,c({},i,a,{components:t,mdxType:"MDXLayout"}),Object(l.a)("h2",null,"Naming Test Functions"),Object(l.a)("hr",null),Object(l.a)("p",null,"Test code is typically organized into functions-one for each method and/or situation you're testing."),Object(l.a)("hr",null),Object(l.a)("p",null,"For instance, the code testing ",Object(l.a)("inlineCode",{parentName:"p"},"SortAndFilterDocs()")," was inside a function named ",Object(l.a)("inlineCode",{parentName:"p"},"Test1()"),":"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"void Test1() {\n    ...\n}\n")),Object(l.a)("hr",null),Object(l.a)("p",null,"Picking a good name for a test function can seem tedious and irrelevant, but don't resort to meaningless names like Test1(), Test2(), and the like."),Object(l.a)("hr",null),Object(l.a)("p",null,"Instead, you should use the name to describe details about the test."),Object(l.a)("hr",null),Object(l.a)("p",null,"In particular, it's handy if the person reading the test code can quickly figure out:"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"The class being tested (if any)"),Object(l.a)("li",{parentName:"ul"},"The function being tested"),Object(l.a)("li",{parentName:"ul"},"The situation or bug being tested")),Object(l.a)("hr",null),Object(l.a)("p",null,'A simple approach to construct a good test function name is to just concatenate that information together, possibly with a "Test_" prefix.'),Object(l.a)("hr",null),Object(l.a)("p",null,"For instance, instead of naming it ",Object(l.a)("inlineCode",{parentName:"p"},"Test1()"),", we can use the ",Object(l.a)("inlineCode",{parentName:"p"},"Test_<FunctionName>()")," format:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"void Test_SortAndFilterDocs() {\n    ...\n}\n")),Object(l.a)("hr",null),Object(l.a)("p",null,"Depending on how sophisticated this test is, you might consider a separate test function for each situation being tested."),Object(l.a)("hr",null),Object(l.a)("p",null,"You could use the ",Object(l.a)("inlineCode",{parentName:"p"},"Test_<FunctionName>_<Situation>()")," format:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),"void Test_SortAndFilterDocs_BasicSorting() {\n    ...\n}\n\nvoid Test_SortAndFilterDocs_NegativeValues() {\n    ...\n}\n\n...\n")),Object(l.a)("hr",null),Object(l.a)("h4",null,"Don't be afraid of having a long or clunky name here."),Object(l.a)("hr",null),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"not called throughout your codebase"),Object(l.a)("li",{parentName:"ul"},"effectively acting like a comment",Object(l.a)("li",{style:{color:"var(--color-js)"}},"most testing frameworks will print out the name of the function where the assertion failed",Object(l.a)("ul",null,Object(l.a)("li",null,"so a descriptive name is especially helpful"))))),Object(l.a)("hr",null),Object(l.a)("p",null,"Note that if you're using a testing framework, there might already be rules or conventions on how methods are named."),Object(l.a)("hr",null),Object(l.a)("p",null,'For instance, the Python unit test module expects test method names to start with "test."'),Object(l.a)("hr",null),Object(l.a)("p",null,"When it comes to naming helper functions in your test code,"),Object(l.a)("hr",null),Object(l.a)("p",null,'it\'s useful to highlight whether the function does any assertions itself or is just an ordinary "test-unaware" helper.'),Object(l.a)("hr",null),Object(l.a)("p",null,"For instance, in this chapter, any helper function that calls assert() is named Check...()."),Object(l.a)("hr",null),Object(l.a)("p",null,"But the function AddScoredDoc() was named just like an ordinary helper function."),Object(l.a)("hr",null),Object(l.a)("p",null,"Isn't it easier to define in sentences if the method name is so descriptive?"),Object(l.a)("hr",null),Object(l.a)("p",null,"「日本語テストメソッドについてどう思いますか？」"),Object(l.a)("p",null,Object(l.a)("a",c({parentName:"p"},{href:"https://www.slideshare.net/kenjikumaie/ss-25876730"}),"https://www.slideshare.net/kenjikumaie/ss-25876730")),Object(l.a)("hr",null),Object(l.a)("p",null,"「TDD／BDDの思想とテスティングフレームワークの関係を整理しよう」"),Object(l.a)("p",null,Object(l.a)("a",c({parentName:"p"},{href:"https://www.atmarkit.co.jp/ait/articles/1403/25/news033.html"}),"https://www.atmarkit.co.jp/ait/articles/1403/25/news033.html")),Object(l.a)("hr",null),Object(l.a)("p",null,"「RSpecしぐさ 〜歴史から学ぶRSpec〜」"),Object(l.a)("p",null,Object(l.a)("a",c({parentName:"p"},{href:"https://www.slideshare.net/takafumionaka/rspec-83693226"}),"https://www.slideshare.net/takafumionaka/rspec-83693226")),Object(l.a)("hr",null),Object(l.a)("img",{src:n(3)}),Object(l.a)("hr",null),Object(l.a)("img",{src:n(5)}),Object(l.a)("hr",null),Object(l.a)("p",null,'I recommend you to read appendix c of translated "test-driven development".'),Object(l.a)("hr",null),Object(l.a)("h3",null,"Summary"),Object(l.a)("hr",null),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},'"TDD" is misleading. What is the "Test"?'),Object(l.a)("li",{parentName:"ul"},'The word "Test" does not refer to "automated", "implitated" or "clear" so-called "test activities" such as "automated test"'),Object(l.a)("li",{parentName:"ul"},'As a result, "Test" was changed to "Behaviour" again'),Object(l.a)("li",{parentName:"ul"},'Emergence of "RSpec"'),Object(l.a)("li",{parentName:"ul"},'Emergence of "Cucumber"',Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},"More suitable for acceptance test"),Object(l.a)("li",{parentName:"ul"},'In Japan, QA Engineer often use this format in a context "automated test".')))))}p.isMDXComponent=!0},function(e,t,n){"use strict";n.r(t),n.d(t,"slides",(function(){return s})),n.d(t,"fusumaProps",(function(){return u})),n.d(t,"default",(function(){return p}));var a=n(2),r=n.n(a),l=n(0);function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var s=[function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"What Was Wrong with That Test"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"At the beginning of the chapter, we claimed there were at least eight things wrong with this test:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'void Test1() {\n    vector<ScoredDocument> docs;\n    docs.resize(5);\n    docs[0].url = "http://example.com";\n    docs[0].score = -5.0;\n    docs[1].url = "http://example.com";\n    docs[1].score = 1;\n    docs[2].url = "http://example.com";\n    docs[2].score = 4;\n    docs[3].url = "http://example.com";\n    docs[3].score = -99998.7;\n    docs[4].url = "http://example.com";\n    docs[4].score = 3.0;\n\n    SortAndFilterDocs(&docs);\n\n    assert(docs.size() == 3);\n    assert(docs[0].score == 4);\n    assert(docs[1].score == 3.0);\n    assert(docs[2].score == 1);\n}\n')))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Now that we've learned some techniques for writing better tests, let's identify them:"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"1. The test is very long and full of unimportant details."),Object(l.a)("br",null),Object(l.a)("p",null,"You can describe what this test is doing in one sentence, so the test statement shouldn't be much longer."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"2. Adding another test isn't easy."),Object(l.a)("br",null),Object(l.a)("p",null,"You'd be tempted to copy/paste/modify, which would make the code even longer and full of duplication."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"3. The test failure messages aren't very useful."),Object(l.a)("br",null),Object(l.a)("p",null,"If this test fails, it will just say Assertion failed: ",Object(l.a)("inlineCode",{parentName:"p"},"docs.size() == 3"),", which doesn't give you enough information to debug it further."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"4. The test tries to test everything at once."),Object(l.a)("br",null),Object(l.a)("p",null,"It's trying to test both the negative filtering and the sorting functionality. It would be more readable to break this into multiple tests."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"5. The test inputs aren't simple."),Object(l.a)("br",null),Object(l.a)("p",null,'In particular, the example score -99998.7 is "loud" and gets your attention even though there isn\'t any significance to that specific value. A simpler negative value would suffice.'))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"6. The test inputs don't thoroughly exercise the code."),Object(l.a)("br",null),Object(l.a)("p",null,"For example, it doesn't test when thescore is 0. (Would that document be filtered or not?)"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"7. It doesn't test other extreme inputs, such as an empty input vector, a very large vector, or one with duplicate scores."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"8. The name Test1() is meaningless - the name should describe the function or situation being tested."))}],u=[{classes:"title"},{},{},{},{note:"思わずコピペしたくなっちゃうわって話。結果として長くて重複の多いソースになるね"},{note:"エラーメッセージが役に立たねぇ・・・"},{note:"一度にすべてのテストをやろうとしてるがな・・・"},{note:"テストの入力値がひどい・・・無意味にどでかい数字"},{note:"テストの入力値がひどい・・・しかも網羅できてねぇ"},{note:"テストの入力値がひどい・・・極端な入力値とかのテストしてねぇ"},{note:"テストメソッド名（笑）"}],i={slides:s},b="wrapper";function p(e){var t=e.components,n=o(e,["components"]);return Object(l.a)(b,c({},i,n,{components:t,mdxType:"MDXLayout"}),Object(l.a)("h2",null,"What Was Wrong with That Test"),Object(l.a)("hr",null),Object(l.a)("p",null,"At the beginning of the chapter, we claimed there were at least eight things wrong with this test:"),Object(l.a)("pre",null,Object(l.a)("code",c({parentName:"pre"},{className:"language-cpp"}),'void Test1() {\n    vector<ScoredDocument> docs;\n    docs.resize(5);\n    docs[0].url = "http://example.com";\n    docs[0].score = -5.0;\n    docs[1].url = "http://example.com";\n    docs[1].score = 1;\n    docs[2].url = "http://example.com";\n    docs[2].score = 4;\n    docs[3].url = "http://example.com";\n    docs[3].score = -99998.7;\n    docs[4].url = "http://example.com";\n    docs[4].score = 3.0;\n\n    SortAndFilterDocs(&docs);\n\n    assert(docs.size() == 3);\n    assert(docs[0].score == 4);\n    assert(docs[1].score == 3.0);\n    assert(docs[2].score == 1);\n}\n')),Object(l.a)("hr",null),Object(l.a)("p",null,"Now that we've learned some techniques for writing better tests, let's identify them:"),Object(l.a)("hr",null),Object(l.a)("h3",null,"1. The test is very long and full of unimportant details."),Object(l.a)("br",null),Object(l.a)("p",null,"You can describe what this test is doing in one sentence, so the test statement shouldn't be much longer."),Object(l.a)("hr",null),Object(l.a)("h3",null,"2. Adding another test isn't easy."),Object(l.a)("br",null),Object(l.a)("p",null,"You'd be tempted to copy/paste/modify, which would make the code even longer and full of duplication."),Object(l.a)("hr",null),Object(l.a)("h3",null,"3. The test failure messages aren't very useful."),Object(l.a)("br",null),Object(l.a)("p",null,"If this test fails, it will just say Assertion failed: ",Object(l.a)("inlineCode",{parentName:"p"},"docs.size() == 3"),", which doesn't give you enough information to debug it further."),Object(l.a)("hr",null),Object(l.a)("h3",null,"4. The test tries to test everything at once."),Object(l.a)("br",null),Object(l.a)("p",null,"It's trying to test both the negative filtering and the sorting functionality. It would be more readable to break this into multiple tests."),Object(l.a)("hr",null),Object(l.a)("h3",null,"5. The test inputs aren't simple."),Object(l.a)("br",null),Object(l.a)("p",null,'In particular, the example score -99998.7 is "loud" and gets your attention even though there isn\'t any significance to that specific value. A simpler negative value would suffice.'),Object(l.a)("hr",null),Object(l.a)("h3",null,"6. The test inputs don't thoroughly exercise the code."),Object(l.a)("br",null),Object(l.a)("p",null,"For example, it doesn't test when thescore is 0. (Would that document be filtered or not?)"),Object(l.a)("hr",null),Object(l.a)("h3",null,"7. It doesn't test other extreme inputs, such as an empty input vector, a very large vector, or one with duplicate scores."),Object(l.a)("hr",null),Object(l.a)("h3",null,"8. The name Test1() is meaningless - the name should describe the function or situation being tested."))}p.isMDXComponent=!0},function(e,t,n){"use strict";n.r(t),n.d(t,"slides",(function(){return s})),n.d(t,"fusumaProps",(function(){return u})),n.d(t,"default",(function(){return p}));var a=n(2),r=n.n(a),l=n(0);function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var s=[function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"Test Friendly Development"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Some code is easier to test than other code."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Ideal code to test"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"has a well-defined interface,"),Object(l.a)("li",{parentName:"ul"},'doesn\'t have much state or other "setup,"'),Object(l.a)("li",{parentName:"ul"},"doesn’t have much hidden data to inspec.")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"If you write your code knowing you'll be writing a test for it later, a funny thing happens:"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},Object(l.a)("em",{parentName:"strong"},"you start designing your code so that it's easy to test!"))))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Fortunately, coding this way also means that you create better code in general."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Test-friendly designs often lead naturally to well-organized code, with separate parts to do separate things."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"TEST-DRIVEN DEVELOPMENT"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("img",{src:n(3)}))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("img",{src:n(5)}))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h4",null,'An Introduction to "test-driven development"'),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"I strongly recomend you to read just chapter 1",Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},"key idea and essence are contained"))),Object(l.a)("li",{parentName:"ul"},'"test-driven development" is not about "Testing method"'),Object(l.a)("li",{parentName:"ul"},'I thought it is about "design"',Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},'"work" and "beutiful" code')))))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h4",null,"by using TDD, awful codes below will never be created"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"The test is very long and full of unimportant details."),Object(l.a)("li",{parentName:"ul"},"Adding another test isn't easy.")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"because you define the behaviour before you write the code"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Of all the ways to break up a program into classes and methods, the most decoupled ones are usually the easiest to test."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"On the other hand, let's say your program is very interconnected, with many method calls between your classes and lots of parameters for all the methods."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Not only would that program have hard-to-understand code, but the test code would be just as ugly, and hard to read and write."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,'Having lots of "external" components (global variables that need to be initialized, libraries or config files that need to be loaded, etc.) also makes it more annoying to write tests.'))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"Software Structure Metrics Based on Information Flow"),Object(l.a)("p",null,Object(l.a)("a",c({parentName:"p"},{href:"https://www.academia.edu/26311925/Software_Structure_Metrics_Based_on_Information_Flow"}),"https://www.academia.edu/26311925/Software_Structure_Metrics_Based_on_Information_Flow")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},'First researchers of "fan-out" and "fan-in"',Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},"Sallie Henry, Dennis Kafura"))),Object(l.a)("li",{parentName:"ul"},"(fan-in*fan-out)^2 is larger, the method or module contains more bugs")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,'It is said that a high "fan in" and a low "fan out" are good, but it is very dangerous if both numbers are high.'))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h4",null,"fan-out"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"fan-out of procedure A is an addition of the number of local flow from A and data structures modified by A",Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},"local flow",Object(l.a)("ol",{parentName:"li"},Object(l.a)("li",{parentName:"ol"},"A calls B"),Object(l.a)("li",{parentName:"ol"},"A returns a value by the call of B and B uses that value"),Object(l.a)("li",{parentName:"ol"},"C calles B with the value A returns"))),Object(l.a)("li",{parentName:"ul"},"adds the number of these flow and the number of the data structure modified by A")))))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h4",null,"fan-in"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"fan in of procedure A is an addition of the number of local flow against A and data structures from which A gets information",Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},"fan-in is a good indicator of reusability")))))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Generally, if you're designing your code and realize, Hmm, this is going to be a nightmare to test, that's a good reason to stop and rethink the design."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Table 14-1 shows some typical testing and design problems."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"TABLE 14-1. Characteristics of less testable code, and how this leads to problems with design"),Object(l.a)("table",null,Object(l.a)("thead",{parentName:"table"},Object(l.a)("tr",{parentName:"thead"},Object(l.a)("th",c({parentName:"tr"},{align:null}),"Characteristic"),Object(l.a)("th",c({parentName:"tr"},{align:null}),"Testability problem"),Object(l.a)("th",c({parentName:"tr"},{align:null}),"Design problem"))),Object(l.a)("tbody",{parentName:"table"},Object(l.a)("tr",{parentName:"tbody"},Object(l.a)("td",c({parentName:"tr"},{align:null}),"Use of global variables"),Object(l.a)("td",c({parentName:"tr"},{align:null}),"All the global state needs to reset for every test (otherwise, different tests can interfere with each other)."),Object(l.a)("td",c({parentName:"tr"},{align:null}),"Hard to understand which functions have what side effects. Can't think about each function in isolation; need to consider the whole program to understand if everything works.")),Object(l.a)("tr",{parentName:"tbody"},Object(l.a)("td",c({parentName:"tr"},{align:null}),"Code depends on a lot of external components"),Object(l.a)("td",c({parentName:"tr"},{align:null}),Object(l.a)("span",{style:{color:"var(--color-js)"}},"It's harder to write any tests because there's so much scaffolding to set up first. Tests are less fun to write, so people avoid writing tests.")),Object(l.a)("td",c({parentName:"tr"},{align:null}),"System is more likely to fail when one of the dependencies fails. It's harder to understand what impact any given change might make. It's harder to refactor classes. System has more failure modes and recovery paths to think about.")),Object(l.a)("tr",{parentName:"tbody"},Object(l.a)("td",c({parentName:"tr"},{align:null}),"Code has nondeterministic behavior"),Object(l.a)("td",c({parentName:"tr"},{align:null}),"Tests are flaky and unreliable. Tests that occasionally fail end up being ignored."),Object(l.a)("td",c({parentName:"tr"},{align:null}),"The program is more likely to have race conditions or other nonreproducible bugs. The program is harder to reason about. Bugs in production are very difficult to track down and fix.")))))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"On the other hand, if you have a design that's easy to write tests for, that's a good sign."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Table 14-2 lists some beneficial testing and design characteristics."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"TABLE 14-2. Characteristics of more testable code, and how this leads to good design"),Object(l.a)("table",null,Object(l.a)("thead",{parentName:"table"},Object(l.a)("tr",{parentName:"thead"},Object(l.a)("th",c({parentName:"tr"},{align:null}),"Characteristic"),Object(l.a)("th",c({parentName:"tr"},{align:null}),"Testability benefit"),Object(l.a)("th",c({parentName:"tr"},{align:null}),"Design benefit"))),Object(l.a)("tbody",{parentName:"table"},Object(l.a)("tr",{parentName:"tbody"},Object(l.a)("td",c({parentName:"tr"},{align:null}),Object(l.a)("span",{style:{color:"var(--color-js)"}},"Classes have little or no internal state")),Object(l.a)("td",c({parentName:"tr"},{align:null}),"Tests are easier to write because there is less setup needed to test a method and less hidden state to inspect."),Object(l.a)("td",c({parentName:"tr"},{align:null}),"Classes with less state are simpler and easier to understand.")),Object(l.a)("tr",{parentName:"tbody"},Object(l.a)("td",c({parentName:"tr"},{align:null}),"Classes/functions only do one thing"),Object(l.a)("td",c({parentName:"tr"},{align:null}),"Fewer test cases are required to fully test it."),Object(l.a)("td",c({parentName:"tr"},{align:null}),"Smaller/simpler components are more modular, and the system is generally more decoupled.")),Object(l.a)("tr",{parentName:"tbody"},Object(l.a)("td",c({parentName:"tr"},{align:null}),"Classes depend on few other classes;high decoupling"),Object(l.a)("td",c({parentName:"tr"},{align:null}),"Each class can be tested independently(much easier than testing multiple classes at once)."),Object(l.a)("td",c({parentName:"tr"},{align:null}),"System can be developed in parallel. Classes can be easily modified or removed without disrupting the rest of the system.")),Object(l.a)("tr",{parentName:"tbody"},Object(l.a)("td",c({parentName:"tr"},{align:null}),"Functions have simple, well-defined interfaces"),Object(l.a)("td",c({parentName:"tr"},{align:null}),"There are well-defined behaviors to test for. Simple interfaces take less work to test."),Object(l.a)("td",c({parentName:"tr"},{align:null}),"Interfaces are easier for coders to learn and are more likely to be reused.")))))}],u=[{classes:"title"},{note:"テストしやすいコードもしにくいコードもあるね"},{note:"良いインターフェース\n状態やセットアップがねぇ(良いこと)\n検査が必要な隠されたデータがねぇ(良いこと)"},{note:"後でコード書くんだ！って思っておくとおもろいこと起きるで"},{},{note:"一般的には良いコード生むって言われてるよね"},{note:"関心の分離までできちまうってことや"},{},{classes:"reference"},{classes:"reference"},{classes:"reference"},{classes:"reference"},{classes:"reference"},{note:"疎結合だとテストしやすいよ"},{note:"たくさんのクラスでメソッド呼び出しがあって密結合でめっちゃ引数必要だったらどうよ？"},{note:"プロダクトコードが読みにくいだけでなくてテストコードもひどいだろうね\n読むのがきついだけでなくて書くのもきついぜ・・・"},{},{classes:"reference"},{classes:"reference"},{classes:"reference"},{classes:"reference"},{classes:"reference"},{note:"これテストすんのはしんどそうだ・・・って思ったら設計し直すタイミングっすね"},{},{note:"グローバルって言ってるけど、状態を持っている事自体が結構危険で、value object というパターンがあるくらい\nたくさんスパイやスタブを用意しなければならなくなったらやばい兆候"},{},{},{}],i={slides:s},b="wrapper";function p(e){var t=e.components,a=o(e,["components"]);return Object(l.a)(b,c({},i,a,{components:t,mdxType:"MDXLayout"}),Object(l.a)("h2",null,"Test Friendly Development"),Object(l.a)("hr",null),Object(l.a)("p",null,"Some code is easier to test than other code."),Object(l.a)("hr",null),Object(l.a)("p",null,"Ideal code to test"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"has a well-defined interface,"),Object(l.a)("li",{parentName:"ul"},'doesn\'t have much state or other "setup,"'),Object(l.a)("li",{parentName:"ul"},"doesn’t have much hidden data to inspec.")),Object(l.a)("hr",null),Object(l.a)("p",null,"If you write your code knowing you'll be writing a test for it later, a funny thing happens:"),Object(l.a)("hr",null),Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},Object(l.a)("em",{parentName:"strong"},"you start designing your code so that it's easy to test!"))),Object(l.a)("hr",null),Object(l.a)("p",null,"Fortunately, coding this way also means that you create better code in general."),Object(l.a)("hr",null),Object(l.a)("p",null,"Test-friendly designs often lead naturally to well-organized code, with separate parts to do separate things."),Object(l.a)("hr",null),Object(l.a)("h3",null,"TEST-DRIVEN DEVELOPMENT"),Object(l.a)("hr",null),Object(l.a)("img",{src:n(3)}),Object(l.a)("hr",null),Object(l.a)("img",{src:n(5)}),Object(l.a)("hr",null),Object(l.a)("h4",null,'An Introduction to "test-driven development"'),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"I strongly recomend you to read just chapter 1",Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},"key idea and essence are contained"))),Object(l.a)("li",{parentName:"ul"},'"test-driven development" is not about "Testing method"'),Object(l.a)("li",{parentName:"ul"},'I thought it is about "design"',Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},'"work" and "beutiful" code')))),Object(l.a)("hr",null),Object(l.a)("h4",null,"by using TDD, awful codes below will never be created"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"The test is very long and full of unimportant details."),Object(l.a)("li",{parentName:"ul"},"Adding another test isn't easy.")),Object(l.a)("hr",null),Object(l.a)("p",null,"because you define the behaviour before you write the code"),Object(l.a)("hr",null),Object(l.a)("p",null,"Of all the ways to break up a program into classes and methods, the most decoupled ones are usually the easiest to test."),Object(l.a)("hr",null),Object(l.a)("p",null,"On the other hand, let's say your program is very interconnected, with many method calls between your classes and lots of parameters for all the methods."),Object(l.a)("hr",null),Object(l.a)("p",null,"Not only would that program have hard-to-understand code, but the test code would be just as ugly, and hard to read and write."),Object(l.a)("hr",null),Object(l.a)("p",null,'Having lots of "external" components (global variables that need to be initialized, libraries or config files that need to be loaded, etc.) also makes it more annoying to write tests.'),Object(l.a)("hr",null),Object(l.a)("h3",null,"Software Structure Metrics Based on Information Flow"),Object(l.a)("p",null,Object(l.a)("a",c({parentName:"p"},{href:"https://www.academia.edu/26311925/Software_Structure_Metrics_Based_on_Information_Flow"}),"https://www.academia.edu/26311925/Software_Structure_Metrics_Based_on_Information_Flow")),Object(l.a)("hr",null),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},'First researchers of "fan-out" and "fan-in"',Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},"Sallie Henry, Dennis Kafura"))),Object(l.a)("li",{parentName:"ul"},"(fan-in*fan-out)^2 is larger, the method or module contains more bugs")),Object(l.a)("hr",null),Object(l.a)("p",null,'It is said that a high "fan in" and a low "fan out" are good, but it is very dangerous if both numbers are high.'),Object(l.a)("hr",null),Object(l.a)("h4",null,"fan-out"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"fan-out of procedure A is an addition of the number of local flow from A and data structures modified by A",Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},"local flow",Object(l.a)("ol",{parentName:"li"},Object(l.a)("li",{parentName:"ol"},"A calls B"),Object(l.a)("li",{parentName:"ol"},"A returns a value by the call of B and B uses that value"),Object(l.a)("li",{parentName:"ol"},"C calles B with the value A returns"))),Object(l.a)("li",{parentName:"ul"},"adds the number of these flow and the number of the data structure modified by A")))),Object(l.a)("hr",null),Object(l.a)("h4",null,"fan-in"),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"fan in of procedure A is an addition of the number of local flow against A and data structures from which A gets information",Object(l.a)("ul",{parentName:"li"},Object(l.a)("li",{parentName:"ul"},"fan-in is a good indicator of reusability")))),Object(l.a)("hr",null),Object(l.a)("p",null,"Generally, if you're designing your code and realize, Hmm, this is going to be a nightmare to test, that's a good reason to stop and rethink the design."),Object(l.a)("hr",null),Object(l.a)("p",null,"Table 14-1 shows some typical testing and design problems."),Object(l.a)("hr",null),Object(l.a)("h3",null,"TABLE 14-1. Characteristics of less testable code, and how this leads to problems with design"),Object(l.a)("table",null,Object(l.a)("thead",{parentName:"table"},Object(l.a)("tr",{parentName:"thead"},Object(l.a)("th",c({parentName:"tr"},{align:null}),"Characteristic"),Object(l.a)("th",c({parentName:"tr"},{align:null}),"Testability problem"),Object(l.a)("th",c({parentName:"tr"},{align:null}),"Design problem"))),Object(l.a)("tbody",{parentName:"table"},Object(l.a)("tr",{parentName:"tbody"},Object(l.a)("td",c({parentName:"tr"},{align:null}),"Use of global variables"),Object(l.a)("td",c({parentName:"tr"},{align:null}),"All the global state needs to reset for every test (otherwise, different tests can interfere with each other)."),Object(l.a)("td",c({parentName:"tr"},{align:null}),"Hard to understand which functions have what side effects. Can't think about each function in isolation; need to consider the whole program to understand if everything works.")),Object(l.a)("tr",{parentName:"tbody"},Object(l.a)("td",c({parentName:"tr"},{align:null}),"Code depends on a lot of external components"),Object(l.a)("td",c({parentName:"tr"},{align:null}),Object(l.a)("span",{style:{color:"var(--color-js)"}},"It's harder to write any tests because there's so much scaffolding to set up first. Tests are less fun to write, so people avoid writing tests.")),Object(l.a)("td",c({parentName:"tr"},{align:null}),"System is more likely to fail when one of the dependencies fails. It's harder to understand what impact any given change might make. It's harder to refactor classes. System has more failure modes and recovery paths to think about.")),Object(l.a)("tr",{parentName:"tbody"},Object(l.a)("td",c({parentName:"tr"},{align:null}),"Code has nondeterministic behavior"),Object(l.a)("td",c({parentName:"tr"},{align:null}),"Tests are flaky and unreliable. Tests that occasionally fail end up being ignored."),Object(l.a)("td",c({parentName:"tr"},{align:null}),"The program is more likely to have race conditions or other nonreproducible bugs. The program is harder to reason about. Bugs in production are very difficult to track down and fix.")))),Object(l.a)("hr",null),Object(l.a)("p",null,"On the other hand, if you have a design that's easy to write tests for, that's a good sign."),Object(l.a)("hr",null),Object(l.a)("p",null,"Table 14-2 lists some beneficial testing and design characteristics."),Object(l.a)("hr",null),Object(l.a)("h3",null,"TABLE 14-2. Characteristics of more testable code, and how this leads to good design"),Object(l.a)("table",null,Object(l.a)("thead",{parentName:"table"},Object(l.a)("tr",{parentName:"thead"},Object(l.a)("th",c({parentName:"tr"},{align:null}),"Characteristic"),Object(l.a)("th",c({parentName:"tr"},{align:null}),"Testability benefit"),Object(l.a)("th",c({parentName:"tr"},{align:null}),"Design benefit"))),Object(l.a)("tbody",{parentName:"table"},Object(l.a)("tr",{parentName:"tbody"},Object(l.a)("td",c({parentName:"tr"},{align:null}),Object(l.a)("span",{style:{color:"var(--color-js)"}},"Classes have little or no internal state")),Object(l.a)("td",c({parentName:"tr"},{align:null}),"Tests are easier to write because there is less setup needed to test a method and less hidden state to inspect."),Object(l.a)("td",c({parentName:"tr"},{align:null}),"Classes with less state are simpler and easier to understand.")),Object(l.a)("tr",{parentName:"tbody"},Object(l.a)("td",c({parentName:"tr"},{align:null}),"Classes/functions only do one thing"),Object(l.a)("td",c({parentName:"tr"},{align:null}),"Fewer test cases are required to fully test it."),Object(l.a)("td",c({parentName:"tr"},{align:null}),"Smaller/simpler components are more modular, and the system is generally more decoupled.")),Object(l.a)("tr",{parentName:"tbody"},Object(l.a)("td",c({parentName:"tr"},{align:null}),"Classes depend on few other classes;high decoupling"),Object(l.a)("td",c({parentName:"tr"},{align:null}),"Each class can be tested independently(much easier than testing multiple classes at once)."),Object(l.a)("td",c({parentName:"tr"},{align:null}),"System can be developed in parallel. Classes can be easily modified or removed without disrupting the rest of the system.")),Object(l.a)("tr",{parentName:"tbody"},Object(l.a)("td",c({parentName:"tr"},{align:null}),"Functions have simple, well-defined interfaces"),Object(l.a)("td",c({parentName:"tr"},{align:null}),"There are well-defined behaviors to test for. Simple interfaces take less work to test."),Object(l.a)("td",c({parentName:"tr"},{align:null}),"Interfaces are easier for coders to learn and are more likely to be reused.")))))}p.isMDXComponent=!0},function(e,t,n){"use strict";n.r(t),n.d(t,"slides",(function(){return s})),n.d(t,"fusumaProps",(function(){return u})),n.d(t,"default",(function(){return p}));var a=n(2),r=n.n(a),l=n(0);function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=[function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"Going Too Far"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"It's also possible to focus too much on testing."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Here are some examples:"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"Sacrificing the readability of your real code, for the sake of enabling tests."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Designing your real code to be testable should be a win-win situation:"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"your real code becomes simpler and more decoupled"),Object(l.a)("li",{parentName:"ul"},"your tests are easy to write")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"But if you have to insert lots of ugly plumbing into your real code just so you can test it, something's wrong."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"Being obsessive about 100% test coverage."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Testing the first 90% of your code is often less work than testing that last 10%."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"That last 10% might involve user interface, or dumb error cases, where the cost of the bug isn't really that high and the effort to test it just isn't worth it."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"The truth is that you'll never get 100% coverage anyhow."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"If it's not a missed bug, it might be a missed feature or you might not realize that the spec should be changed."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Depending on how costly your bugs are, there's a sweet spot of how much development time it's worth spending on test code."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"If you’re building a website prototype, it might no tbe worth writing any test code at all."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"On the other hand, if you're writing a controller for a spaceship or medical device, testing is probably your main focus."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h3",null,"Letting testing get in the way of product development."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"We've seen situations where testing, which should be just one aspect of a project, dominates the whole project."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Testing becomes some sort of god to be appeased, and coders just go through the rituals and motions without realizing that their precious engineering time might be better spent elsewhere."))}],u=[{classes:"title"},{},{},{},{},{},{},{},{note:"最後の10%のテストまじきちい"},{note:"割に合わないよ・・・"},{},{note:"バグの見逃しか、機能実装漏れか、仕様の変更に気づいていないかどれかでしょうね"},{note:"ケースバイケースよってこと\nテストコードにどれだけ時間かけるかは、バグがどれだけやばくなるかってところから判断しろよ"},{note:"たとえばウェブページのプロトタイプ作ってるならまぁね・・・"},{note:"宇宙船とか医療機器作ってるならバグったら人死ぬぞ"},{note:"テストがプロダクト開発のじゃまになる"},{note:"テストがプロジェクト全体を支配している状況を目にしたことあるらしい"},{note:"テストが儀式になってるよ・・・"}],i={slides:s},b="wrapper";function p(e){var t=e.components,n=c(e,["components"]);return Object(l.a)(b,o({},i,n,{components:t,mdxType:"MDXLayout"}),Object(l.a)("h2",null,"Going Too Far"),Object(l.a)("hr",null),Object(l.a)("p",null,"It's also possible to focus too much on testing."),Object(l.a)("hr",null),Object(l.a)("p",null,"Here are some examples:"),Object(l.a)("hr",null),Object(l.a)("h3",null,"Sacrificing the readability of your real code, for the sake of enabling tests."),Object(l.a)("hr",null),Object(l.a)("p",null,"Designing your real code to be testable should be a win-win situation:"),Object(l.a)("hr",null),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"your real code becomes simpler and more decoupled"),Object(l.a)("li",{parentName:"ul"},"your tests are easy to write")),Object(l.a)("hr",null),Object(l.a)("p",null,"But if you have to insert lots of ugly plumbing into your real code just so you can test it, something's wrong."),Object(l.a)("hr",null),Object(l.a)("h3",null,"Being obsessive about 100% test coverage."),Object(l.a)("hr",null),Object(l.a)("p",null,"Testing the first 90% of your code is often less work than testing that last 10%."),Object(l.a)("hr",null),Object(l.a)("p",null,"That last 10% might involve user interface, or dumb error cases, where the cost of the bug isn't really that high and the effort to test it just isn't worth it."),Object(l.a)("hr",null),Object(l.a)("p",null,"The truth is that you'll never get 100% coverage anyhow."),Object(l.a)("hr",null),Object(l.a)("p",null,"If it's not a missed bug, it might be a missed feature or you might not realize that the spec should be changed."),Object(l.a)("hr",null),Object(l.a)("p",null,"Depending on how costly your bugs are, there's a sweet spot of how much development time it's worth spending on test code."),Object(l.a)("hr",null),Object(l.a)("p",null,"If you’re building a website prototype, it might no tbe worth writing any test code at all."),Object(l.a)("hr",null),Object(l.a)("p",null,"On the other hand, if you're writing a controller for a spaceship or medical device, testing is probably your main focus."),Object(l.a)("hr",null),Object(l.a)("h3",null,"Letting testing get in the way of product development."),Object(l.a)("hr",null),Object(l.a)("p",null,"We've seen situations where testing, which should be just one aspect of a project, dominates the whole project."),Object(l.a)("hr",null),Object(l.a)("p",null,"Testing becomes some sort of god to be appeased, and coders just go through the rituals and motions without realizing that their precious engineering time might be better spent elsewhere."))}p.isMDXComponent=!0},function(e,t,n){"use strict";n.r(t),n.d(t,"slides",(function(){return s})),n.d(t,"fusumaProps",(function(){return u})),n.d(t,"default",(function(){return p}));var a=n(2),r=n.n(a),l=n(0);function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=[function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h2",null,"Summary"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"In test code, readability is still very important."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"If your tests are very readable,"),Object(l.a)("p",null,"they will in turn be very writable,"),Object(l.a)("p",null,"so people will add more of them.😎"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Also, if you design your real code to be easy to test, your code will have a better design overall."))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"Here are specific points on how to improve your tests:"))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"The top level of each test should be as concise as possible; ideally, each test input/output can be described in one line of code."),Object(l.a)("li",{parentName:"ul"},"If your test fails, it should emit an error message that makes the bug easy to track down and fix."),Object(l.a)("li",{parentName:"ul"},"Use the simplest test inputs that completely exercise your code."),Object(l.a)("li",{parentName:"ul"},"Give your test functions a fully descriptive name so it's clear what each is testing. Instead of Test1(), use a name like ",Object(l.a)("inlineCode",{parentName:"li"},"Test_<FunctionName>_<Situation>"),".")))},function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("p",null,"And above all, make it easy to modify and add new tests."))}],u=[{classes:"title"},{note:"テストコードでも読みやすさは大事だね"},{note:"テストが読みやすい=テストが書きやすい=みんな書く"},{note:"プロダクトコードがテストしやすい設計だとしたら、全体的に良い設計でしょうね"},{},{note:"テストのトップレベルはできるだけ簡潔に、できれば入出力はコード一行で\nテストが失敗したらバグの発見や修正しやすいエラーメッセージ出せ\nテストに有効な最も単純な値つかえ\n説明的な名前つけましょうね"},{}],i={slides:s},b="wrapper";function p(e){var t=e.components,n=c(e,["components"]);return Object(l.a)(b,o({},i,n,{components:t,mdxType:"MDXLayout"}),Object(l.a)("h2",null,"Summary"),Object(l.a)("hr",null),Object(l.a)("p",null,"In test code, readability is still very important."),Object(l.a)("hr",null),Object(l.a)("p",null,"If your tests are very readable,"),Object(l.a)("p",null,"they will in turn be very writable,"),Object(l.a)("p",null,"so people will add more of them.😎"),Object(l.a)("hr",null),Object(l.a)("p",null,"Also, if you design your real code to be easy to test, your code will have a better design overall."),Object(l.a)("hr",null),Object(l.a)("p",null,"Here are specific points on how to improve your tests:"),Object(l.a)("hr",null),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"The top level of each test should be as concise as possible; ideally, each test input/output can be described in one line of code."),Object(l.a)("li",{parentName:"ul"},"If your test fails, it should emit an error message that makes the bug easy to track down and fix."),Object(l.a)("li",{parentName:"ul"},"Use the simplest test inputs that completely exercise your code."),Object(l.a)("li",{parentName:"ul"},"Give your test functions a fully descriptive name so it's clear what each is testing. Instead of Test1(), use a name like ",Object(l.a)("inlineCode",{parentName:"li"},"Test_<FunctionName>_<Situation>"),".")),Object(l.a)("hr",null),Object(l.a)("p",null,"And above all, make it easy to modify and add new tests."))}p.isMDXComponent=!0},function(e,t,n){"use strict";n.r(t),n.d(t,"slides",(function(){return s})),n.d(t,"fusumaProps",(function(){return u})),n.d(t,"default",(function(){return p}));var a=n(2),r=n.n(a),l=n(0);function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=[function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("header",{style:{borderBottom:"solid 1px",borderColor:"var(--color-yellow)",color:"var(--color-yellow)",textAlign:"left",fontSize:"xx-large"}},"At Last"),Object(l.a)("div",{style:{display:"flex",flexDirection:"row",alignItems:"center",minHeight:"70rem"}},Object(l.a)("div",{style:{flexGrow:1}},Object(l.a)("img",{src:n(12)})),Object(l.a)("div",{style:{flexGrow:1}},Object(l.a)("h2",{style:{color:"var(--color-red)",fontSize:"5.4rem"}},"We are hiring!"),Object(l.a)("div",{style:{margin:"7rem 0"}},Object(l.a)("p",null,"WEB、アプリ、フロントエンドエンジニアなど様々な職種でエンジニア募集中です！"),Object(l.a)("p",null,"カジュアル面談（オフィス訪問）歓迎です！"),Object(l.a)("p",null,Object(l.a)("a",{href:"https://www.wantedly.com/projects/254221"},"WANTEDLYはこちら！"))))),Object(l.a)("div",{style:{position:"absolute",bottom:"54px",right:0,zIndex:4,padding:"0 2.4rem 0 0",background:"rgba(255,255,255,1)"}},Object(l.a)("img",{src:n(13),style:{width:"inherit"}})),Object(l.a)("footer",{style:{textAlign:"left",borderTop:"solid 1px",borderColor:"var(--color-yellow)"}},"Copyright © Kakaku.com Inc. All Rights Reserved."))}],u=[{classes:"hiring"}],i={slides:s},b="wrapper";function p(e){var t=e.components,a=c(e,["components"]);return Object(l.a)(b,o({},i,a,{components:t,mdxType:"MDXLayout"}),Object(l.a)("header",{style:{borderBottom:"solid 1px",borderColor:"var(--color-yellow)",color:"var(--color-yellow)",textAlign:"left",fontSize:"xx-large"}},"At Last"),Object(l.a)("div",{style:{display:"flex",flexDirection:"row",alignItems:"center",minHeight:"70rem"}},Object(l.a)("div",{style:{flexGrow:1}},Object(l.a)("img",{src:n(12)})),Object(l.a)("div",{style:{flexGrow:1}},Object(l.a)("h2",{style:{color:"var(--color-red)",fontSize:"5.4rem"}},"We are hiring!"),Object(l.a)("div",{style:{margin:"7rem 0"}},Object(l.a)("p",null,"WEB、アプリ、フロントエンドエンジニアなど様々な職種でエンジニア募集中です！"),Object(l.a)("p",null,"カジュアル面談（オフィス訪問）歓迎です！"),Object(l.a)("p",null,Object(l.a)("a",{href:"https://www.wantedly.com/projects/254221"},"WANTEDLYはこちら！"))))),Object(l.a)("div",{style:{position:"absolute",bottom:"54px",right:0,zIndex:4,padding:"0 2.4rem 0 0",background:"rgba(255,255,255,1)"}},Object(l.a)("img",{src:n(13),style:{width:"inherit"}})),Object(l.a)("footer",{style:{textAlign:"left",borderTop:"solid 1px",borderColor:"var(--color-yellow)"}},"Copyright © Kakaku.com Inc. All Rights Reserved."))}p.isMDXComponent=!0},function(e,t,n){"use strict";n.r(t),n.d(t,"slides",(function(){return s})),n.d(t,"fusumaProps",(function(){return u})),n.d(t,"default",(function(){return p}));var a=n(2),r=n.n(a),l=n(0);function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=[function(e){return Object(l.a)(r.a.Fragment,null,Object(l.a)("h1",null,"Thanks for all"),Object(l.a)("br",null),Object(l.a)("div",{className:"sns-list sns-list-end"},Object(l.a)("a",{href:"https://twitter.com/hagevvashi_d",target:"_blank"},Object(l.a)("i",{className:"fab fa-twitter"})),Object(l.a)("a",{href:"https://github.com/hagevvashi",target:"_blank"},Object(l.a)("i",{className:"fab fa-github"}))))}],u=[{classes:"end",note:"Thank you for your kind attention."}],i={slides:s},b="wrapper";function p(e){var t=e.components,n=c(e,["components"]);return Object(l.a)(b,o({},i,n,{components:t,mdxType:"MDXLayout"}),Object(l.a)("h1",null,"Thanks for all"),Object(l.a)("br",null),Object(l.a)("div",{className:"sns-list sns-list-end"},Object(l.a)("a",{href:"https://twitter.com/hagevvashi_d",target:"_blank"},Object(l.a)("i",{className:"fab fa-twitter"})),Object(l.a)("a",{href:"https://github.com/hagevvashi",target:"_blank"},Object(l.a)("i",{className:"fab fa-github"}))))}p.isMDXComponent=!0},,function(e,t,n){var a=n(51);"string"==typeof a&&(a=[[e.i,a,""]]);var r={insert:"head",singleton:!1};n(4)(a,r);a.locals&&(e.exports=a.locals)},function(e,t,n){}],[[17,6,7]],[1,9]]);